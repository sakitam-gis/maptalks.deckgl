{"version":3,"sources":["webpack:///./src/pages/highway.tsx","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/d3-scale/src/threshold.js"],"names":["DATA_URL","COLOR_SCALE","scaleThreshold","domain","range","WIDTH_SCALE","scaleLinear","clamp","Highway","props","_aggregateAccidents","accidents","incidents","fatalities","forEach","a","r","year","f","key","getKey","_getLineColor","fatalitiesPer1KMile","properties","length","_getLineWidth","incidentsPer1KMile","formatRow","d","Number","deckLayer","viewState","center","zoom","pitch","bearing","initMap","request","this","error","response","DeckGLLayer","layers","GeoJsonLayer","id","data","opacity","stroked","filled","lineWidthMinPixels","parameters","depthTest","getLineColor","getLineWidth","pickable","updateTriggers","transitions","animation","forceRenderOnMoving","forceRenderOnZooming","renderStart","map","addLayer","componentWillUnmount","remove","state","type","Base","threshold","unknown","n","scale","x","_","arguments","Array","from","Math","min","slice","invertExtent","y","i","indexOf","copy","apply"],"mappings":"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","file":"component---src-pages-highway-tsx-6050c7d18390442ebd44.js","sourcesContent":["import DeckGLLayer from 'maptalks.deckgl';\nimport Base from './base';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { scaleLinear, scaleThreshold } from 'd3-scale';\nimport * as request from 'd3-request';\n\nconst DATA_URL = {\n  ACCIDENTS:\n    'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/highway/accidents.csv',\n  ROADS: 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/highway/roads.json'\n};\n\nconst range = [\n  [26, 152, 80],\n  [102, 189, 99],\n  [166, 217, 106],\n  [217, 239, 139],\n  [255, 255, 191],\n  [254, 224, 139],\n  [253, 174, 97],\n  [244, 109, 67],\n  [215, 48, 39],\n  [168, 0, 0]\n];\n\nexport const COLOR_SCALE = scaleThreshold()\n  .domain([0, 4, 8, 12, 20, 32, 52, 84, 136, 220])\n  // @ts-ignore\n  .range(range);\n\nconst WIDTH_SCALE = scaleLinear()\n  .clamp(true)\n  .domain([0, 200])\n  .range([10, 2000]);\n\ninterface IProps {\n\n}\n\nclass Highway extends Base {\n  private deckLayer: DeckGLLayer | null;\n\n  constructor (props: IProps) {\n    super(props);\n    this.deckLayer = null;\n\n    this.viewState = {\n      center: [-100, 38],\n      zoom: 4,\n      pitch: 40.5,\n      bearing: 0,\n    };\n  }\n\n  initMap() {\n    super.initMap();\n\n    request.csv(DATA_URL.ACCIDENTS, this.formatRow, (error, response) => {\n      const year = response[0].year;\n      const accidents = response;\n      if (!error) {\n        const { fatalities, incidents } = this._aggregateAccidents(accidents);\n        this.deckLayer = new DeckGLLayer('deck', {\n          layers: [\n            new GeoJsonLayer({\n              id: 'geojson',\n              data: DATA_URL.ROADS,\n              opacity: 1,\n              stroked: false,\n              filled: false,\n              lineWidthMinPixels: 0.5,\n              parameters: {\n                depthTest: false\n              },\n              getLineColor: (f: any) => this._getLineColor(f, fatalities[year]),\n              getLineWidth: (f: any) => this._getLineWidth(f, incidents[year]),\n              pickable: true,\n              updateTriggers: {\n                getLineColor: { year },\n                getLineWidth: { year }\n              },\n\n              transitions: {\n                getLineColor: 1000,\n                getLineWidth: 1000\n              }\n            })\n          ]\n        }, {\n          animation: false,\n          forceRenderOnMoving: true,\n          forceRenderOnZooming: true,\n          renderStart: () => {\n            // this.renderState?.update();\n          },\n        });\n\n        this.map.addLayer(this.deckLayer);\n      }\n    })\n  }\n\n  componentWillUnmount () {\n    // this.map.remove()\n    if (this.deckLayer) {\n      this.deckLayer.remove()\n    }\n    super.componentWillUnmount();\n  }\n\n  // @ts-ignore\n  getKey ({ state, type, id }) {\n    return `${state}-${type}-${id}`;\n  }\n\n  _aggregateAccidents = (accidents: any) => {\n    const incidents: any = {};\n    const fatalities: any = {};\n\n    if (accidents) {\n      accidents.forEach((a: any) => {\n        const r = (incidents[a.year] = incidents[a.year] || {});\n        const f = (fatalities[a.year] = fatalities[a.year] || {});\n        const key = this.getKey(a);\n        r[key] = a.incidents;\n        f[key] = a.fatalities;\n      });\n    }\n    return {\n      incidents,\n      fatalities\n    };\n  };\n\n  _getLineColor = (f: any, fatalities: any) => {\n    if (!fatalities) {\n      return [200, 200, 200];\n    }\n    const key = this.getKey(f.properties);\n    const fatalitiesPer1KMile = ((fatalities[key] || 0) / f.properties.length) * 1000;\n    return COLOR_SCALE(fatalitiesPer1KMile);\n  };\n\n  _getLineWidth = (f: any, incidents: any) => {\n    if (!incidents) {\n      return 10;\n    }\n    const key = this.getKey(f.properties);\n    const incidentsPer1KMile = ((incidents[key] || 0) / f.properties.length) * 1000;\n    return WIDTH_SCALE(incidentsPer1KMile);\n  };\n\n  formatRow = (d: any) => ({\n    ...d,\n    incidents: Number(d.incidents),\n    fatalities: Number(d.fatalities)\n  });\n}\n\nexport default Highway;\n","import { bisect } from \"d3-array\";\nimport { initRange } from \"./init.js\";\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function (y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return threshold().domain(domain).range(range).unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}"],"sourceRoot":""}