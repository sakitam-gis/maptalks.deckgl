{"version":3,"sources":["webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-vertex.glsl.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-fragment.glsl.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/arc-layer/arc-layer.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/arc-layer/arc-layer-vertex.glsl.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/arc-layer/arc-layer-fragment.glsl.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/core/dist/esm/lib/layer-extension.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/extensions/dist/esm/brushing/shader-module.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/extensions/dist/esm/brushing/brushing.js","webpack:///./src/pages/brushing/index.tsx"],"names":["DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","_Layer","ScatterplotLayer","this","apply","arguments","key","id","prototype","call","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","_ref","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","_ref2","uniforms","viewport","_this$props","pointRadiusMultiplier","metersPerPixel","lineWidthMultiplier","setUniforms","draw","Object","assign","getShaders","geometry","drawMode","vertexCount","attributes","positions","Float32Array","isInstanced","layerName","getSourcePosition","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","widthMinPixels","widthMaxPixels","ArcLayer","instanceSourcePositions","instanceTargetPositions","instanceSourceColors","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","widthMultiplier","i","concat","numSegments","LayerExtension","opts","undefined","extension","constructor","_extension$constructo","newProps","updateTriggers","propDef","propValue","getSubLayerAccessor","params","TARGET","source","target","custom","source_target","name","dependencies","project","inject","getUniforms","_opts$brushingEnabled","brushingEnabled","_opts$brushingRadius","brushingRadius","_opts$brushingTarget","brushingTarget","mousePosition","brushing_enabled","Boolean","containsPixel","brushing_radius","brushing_target","brushing_mousePos","unproject","y","_LayerExtension","BrushingExtension","_this","attributeManager","add","brushingTargets","update","getBrushingTarget","useConstantTargetPositions","shaderAttributes","divisor","instanceBrushingTargets","onMouseMove","getCurrentLayer","setNeedsRedraw","deck","eventManager","on","pointermove","pointerleave","off","attribute","constant","extensionName","SOURCE_COLOR","TARGET_COLOR","inFlowColors","outFlowColors","brushingExtension","Brushing","data","enableBrushing","brushRadius","opacity","deckLayer","viewState","center","zoom","pitch","bearing","initMap","fetch","then","response","json","features","_renderLayers","componentWillUnmount","remove","arcs","targets","sources","pairs","forEach","county","properties","flows","targetCentroid","centroid","gain","loss","keys","toId","Math","abs","pairKey","sort","a","b","join","sourceCentroid","sign","push","radius","net","sizeScale","scaleLinear","domain","range","pt","sqrt","getLayerData","layers","d","extensions","pickable","setProps","console","log","DeckGLLayer","animation","forceRenderOnMoving","forceRenderOnZooming","renderStart","renderState","map","addLayer","e","error","Base"],"mappings":"wQAUIA,EAAgB,CAAC,EAAG,EAAG,EAAG,KAC1BC,EAAe,CACjBC,YAAa,SACbC,YAAa,CACXC,KAAM,SACNC,IAAK,EACLC,MAAO,GAETC,gBAAiB,CACfH,KAAM,SACNC,IAAK,EACLC,MAAO,GAETE,gBAAiB,CACfJ,KAAM,SACNC,IAAK,EACLC,MAAOG,OAAOC,kBAEhBC,eAAgB,SAChBC,eAAgB,CACdR,KAAM,SACNC,IAAK,EACLC,MAAO,GAETO,mBAAoB,CAClBT,KAAM,SACNC,IAAK,EACLC,MAAO,GAETQ,mBAAoB,CAClBV,KAAM,SACNC,IAAK,EACLC,MAAOG,OAAOC,kBAEhBK,SAAS,EACTC,QAAQ,EACRC,YAAa,CACXb,KAAM,WACNE,MAAO,SAAeY,GACpB,OAAOA,EAAEC,WAGbC,UAAW,CACThB,KAAM,WACNE,MAAO,GAETe,aAAc,CACZjB,KAAM,WACNE,MAAON,GAETsB,aAAc,CACZlB,KAAM,WACNE,MAAON,GAETuB,aAAc,CACZnB,KAAM,WACNE,MAAO,GAETkB,YAAa,CACXC,cAAe,gBAEjBC,QAAS,CACPD,cAAe,WAEjBE,SAAU,CACRF,cAAe,CAAC,eAAgB,kBAIhC,EAAmB,SAAUG,GAG/B,SAASC,IAGP,OAFA,YAAgBC,KAAMD,GAEf,YAA2BC,KAAM,YAAgBD,GAAkBE,MAAMD,KAAME,YAiIxF,OAtIA,YAAUH,EAAkBD,GAQ5B,YAAaC,EAAkB,CAAC,CAC9BI,IAAK,aACL3B,MAAO,SAAoB4B,GACzB,OAAO,YAAK,YAAgBL,EAAiBM,WAAY,aAAcL,MAAMM,KAAKN,KAAM,CACtFO,GC5FO,81DD6FPC,GE7FO,q/BF8FPC,QAAS,CAACC,EAAA,EAAWC,EAAA,OAGxB,CACDR,IAAK,kBACL3B,MAAO,WACLwB,KAAKY,sBAAsBC,aAAa,CACtCC,kBAAmB,CACjBC,KAAM,EACNzC,KAAM,KACN0C,KAAMhB,KAAKiB,oBACXC,YAAY,EACZC,SAAU,eAEZC,eAAgB,CACdL,KAAM,EACNG,YAAY,EACZC,SAAU,YACVE,aAAc,GAEhBC,mBAAoB,CAClBP,KAAMf,KAAKuB,MAAMC,YAAYC,OAC7BP,YAAY,EACZQ,YAAY,EACZpD,KAAM,KACN6C,SAAU,eACVE,aAAc,CAAC,EAAG,EAAG,EAAG,MAE1BM,mBAAoB,CAClBZ,KAAMf,KAAKuB,MAAMC,YAAYC,OAC7BP,YAAY,EACZQ,YAAY,EACZpD,KAAM,KACN6C,SAAU,eACVE,aAAc,CAAC,EAAG,EAAG,EAAG,MAE1BO,mBAAoB,CAClBb,KAAM,EACNG,YAAY,EACZC,SAAU,eACVE,aAAc,OAInB,CACDlB,IAAK,cACL3B,MAAO,SAAqBqD,GAC1B,IAAIN,EAAQM,EAAKN,MACbO,EAAWD,EAAKC,SAChBC,EAAcF,EAAKE,YAQvB,GANA,YAAK,YAAgBhC,EAAiBM,WAAY,cAAeL,MAAMM,KAAKN,KAAM,CAChFuB,MAAOA,EACPO,SAAUA,EACVC,YAAaA,IAGXA,EAAYC,kBAAmB,CACjC,IAAIC,EAAKjC,KAAKkC,QAAQD,GAElBjC,KAAKmC,MAAMC,OACbpC,KAAKmC,MAAMC,MAAc,SAG3BpC,KAAKqC,SAAS,CACZD,MAAOpC,KAAKsC,UAAUL,KAExBjC,KAAKY,sBAAsB2B,mBAG9B,CACDpC,IAAK,OACL3B,MAAO,SAAcgE,GACnB,IAAIC,EAAWD,EAAMC,SACjBC,EAAW1C,KAAKkC,QAAQQ,SACxBC,EAAc3C,KAAKuB,MACnBnD,EAAcuE,EAAYvE,YAC1BC,EAAcsE,EAAYtE,YAC1BI,EAAkBkE,EAAYlE,gBAC9BC,EAAkBiE,EAAYjE,gBAC9BO,EAAU0D,EAAY1D,QACtBC,EAASyD,EAAYzD,OACrBL,EAAiB8D,EAAY9D,eAC7BC,EAAiB6D,EAAY7D,eAC7BC,EAAqB4D,EAAY5D,mBACjCC,EAAqB2D,EAAY3D,mBACjC4D,EAAwC,WAAhBxE,EAA2BsE,EAASG,eAAiB,EAC7EC,EAAyC,WAAnBjE,EAA8B6D,EAASG,eAAiB,EAClF7C,KAAKmC,MAAMC,MAAMW,YAAYN,GAAUM,YAAY,CACjD9D,QAASA,EAAU,EAAI,EACvBC,OAAQA,EACRb,YAAaA,EAAcuE,EAC3BnE,gBAAiBA,EACjBC,gBAAiBA,EACjBI,eAAgBA,EAAiBgE,EACjC/D,mBAAoBA,EACpBC,mBAAoBA,IACnBgE,SAEJ,CACD7C,IAAK,YACL3B,MAAO,SAAmByD,GAExB,OAAO,IAAI,IAAMA,EAAIgB,OAAOC,OAAOlD,KAAKmD,aAAc,CACpD/C,GAAIJ,KAAKuB,MAAMnB,GACfgD,SAAU,IAAI,IAAS,CACrBC,SAAU,EACVC,YAAa,EACbC,WAAY,CACVC,UAAW,CACTzC,KAAM,EACNvC,MAAO,IAAIiF,aATH,EAAE,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,QAapDC,aAAa,SAKZ3D,EAvIc,CAwIrB,KAGF,EAAiB4D,UAAY,mBAC7B,EAAiBxF,aAAeA,G,gTGjN5BD,EAAgB,CAAC,EAAG,EAAG,EAAG,KAC1BC,EAAe,CACjByF,kBAAmB,CACjBtF,KAAM,WACNE,MAAO,SAAeY,GACpB,OAAOA,EAAEyE,iBAGbC,kBAAmB,CACjBxF,KAAM,WACNE,MAAO,SAAeY,GACpB,OAAOA,EAAE2E,iBAGbC,eAAgB,CACd1F,KAAM,WACNE,MAAON,GAET+F,eAAgB,CACd3F,KAAM,WACNE,MAAON,GAETgG,SAAU,CACR5F,KAAM,WACNE,MAAO,GAET2F,UAAW,CACT7F,KAAM,WACNE,MAAO,GAET4F,QAAS,CACP9F,KAAM,WACNE,MAAO,GAET6F,aAAa,EACbC,WAAY,SACZC,WAAY,CACVjG,KAAM,SACNE,MAAO,EACPD,IAAK,GAEPiG,eAAgB,CACdlG,KAAM,SACNE,MAAO,EACPD,IAAK,GAEPkG,eAAgB,CACdnG,KAAM,SACNE,MAAOG,OAAOC,iBACdL,IAAK,IAIL,EAAW,SAAUuB,GAGvB,SAAS4E,IAGP,OAFA,YAAgB1E,KAAM0E,GAEf,YAA2B1E,KAAM,YAAgB0E,GAAUzE,MAAMD,KAAME,YA2IhF,OAhJA,YAAUwE,EAAU5E,GAQpB,YAAa4E,EAAU,CAAC,CACtBvE,IAAK,aACL3B,MAAO,WACL,OAAO,YAAK,YAAgBkG,EAASrE,WAAY,aAAcL,MAAMM,KAAKN,KAAM,CAC9EO,GC5EO,84MD6EPC,GE7EO,qTF8EPC,QAAS,CAACC,EAAA,EAAWC,EAAA,OAGxB,CACDR,IAAK,kBACL3B,MAAO,WACkBwB,KAAKY,sBACXC,aAAa,CAC5B8D,wBAAyB,CACvB5D,KAAM,EACNzC,KAAM,KACN0C,KAAMhB,KAAKiB,oBACXC,YAAY,EACZC,SAAU,qBAEZyD,wBAAyB,CACvB7D,KAAM,EACNzC,KAAM,KACN0C,KAAMhB,KAAKiB,oBACXC,YAAY,EACZC,SAAU,qBAEZ0D,qBAAsB,CACpB9D,KAAMf,KAAKuB,MAAMC,YAAYC,OAC7BnD,KAAM,KACNoD,YAAY,EACZR,YAAY,EACZC,SAAU,iBACVE,aAAcnD,GAEhB4G,qBAAsB,CACpB/D,KAAMf,KAAKuB,MAAMC,YAAYC,OAC7BnD,KAAM,KACNoD,YAAY,EACZR,YAAY,EACZC,SAAU,iBACVE,aAAcnD,GAEhB6G,eAAgB,CACdhE,KAAM,EACNG,YAAY,EACZC,SAAU,WACVE,aAAc,GAEhB2D,gBAAiB,CACfjE,KAAM,EACNG,YAAY,EACZC,SAAU,YACVE,aAAc,GAEhB4D,cAAe,CACblE,KAAM,EACNG,YAAY,EACZC,SAAU,UACVE,aAAc,OAInB,CACDlB,IAAK,cACL3B,MAAO,SAAqBqD,GAC1B,IAAIN,EAAQM,EAAKN,MACbO,EAAWD,EAAKC,SAChBC,EAAcF,EAAKE,YAQvB,GANA,YAAK,YAAgB2C,EAASrE,WAAY,cAAeL,MAAMM,KAAKN,KAAM,CACxEuB,MAAOA,EACPO,SAAUA,EACVC,YAAaA,IAGXA,EAAYC,kBAAmB,CACjC,IAAIC,EAAKjC,KAAKkC,QAAQD,GAElBjC,KAAKmC,MAAMC,OACbpC,KAAKmC,MAAMC,MAAc,SAG3BpC,KAAKqC,SAAS,CACZD,MAAOpC,KAAKsC,UAAUL,KAExBjC,KAAKY,sBAAsB2B,mBAG9B,CACDpC,IAAK,OACL3B,MAAO,SAAcgE,GACnB,IAAIC,EAAWD,EAAMC,SACjBC,EAAW1C,KAAKkC,QAAQQ,SACxBC,EAAc3C,KAAKuB,MACnB+C,EAAa3B,EAAY2B,WACzBC,EAAa5B,EAAY4B,WACzBC,EAAiB7B,EAAY6B,eAC7BC,EAAiB9B,EAAY8B,eAC7BJ,EAAc1B,EAAY0B,YAC1Ba,EAAiC,WAAfZ,EAA0B5B,EAASG,eAAiB,EAC1E7C,KAAKmC,MAAMC,MAAMW,YAAYN,GAAUM,YAAY,CACjDsB,YAAaA,EACbE,WAAYA,EAAaW,EACzBV,eAAgBA,EAChBC,eAAgBA,IACfzB,SAEJ,CACD7C,IAAK,YACL3B,MAAO,SAAmByD,GAIxB,IAHA,IAAIuB,EAAY,GAGP2B,EAAI,EAAGA,EAFG,GAEeA,IAChC3B,EAAYA,EAAU4B,OAAO,CAACD,EAAG,EAAG,EAAGA,GAAI,EAAG,IAGhD,IAAI/C,EAAQ,IAAI,IAAMH,EAAIgB,OAAOC,OAAO,GAAIlD,KAAKmD,aAAc,CAC7D/C,GAAIJ,KAAKuB,MAAMnB,GACfgD,SAAU,IAAI,IAAS,CACrBC,SAAU,EACVE,WAAY,CACVC,UAAW,IAAIC,aAAaD,MAGhCE,aAAa,KAKf,OAHAtB,EAAMW,YAAY,CAChBsC,YAjBiB,KAmBZjD,MAIJsC,EAjJM,CAkJb,KAGF,EAASf,UAAY,WACrB,EAASxF,aAAeA,E,gBGjNpB,EAAiB,WACnB,SAASmH,IACP,IAAIC,EAAOrF,UAAUuB,OAAS,QAAsB+D,IAAjBtF,UAAU,GAAmBA,UAAU,GAAK,GAE/E,YAAgBF,KAAMsF,GAEtBtF,KAAKuF,KAAOA,EA0Dd,OAvDA,YAAaD,EAAgB,CAAC,CAC5BnF,IAAK,SACL3B,MAAO,SAAgBiH,GACrB,OAAIzF,OAASyF,GAINzF,KAAK0F,cAAgBD,EAAUC,aAAe,YAAU1F,KAAKuF,KAAME,EAAUF,QAErF,CACDpF,IAAK,aACL3B,MAAO,SAAoBiH,GACzB,OAAO,OAER,CACDtF,IAAK,mBACL3B,MAAO,SAA0BiH,GAC/B,IAAIE,EAAwBF,EAAUC,YAAYvH,aAC9CA,OAAyC,IAA1BwH,EAAmC,GAAKA,EACvDC,EAAW,CACbC,eAAgB,IAGlB,IAAK,IAAI1F,KAAOhC,EACd,GAAIgC,KAAOH,KAAKuB,MAAO,CACrB,IAAIuE,EAAU3H,EAAagC,GACvB4F,EAAY/F,KAAKuB,MAAMpB,GAC3ByF,EAASzF,GAAO4F,EAEZD,GAA4B,aAAjBA,EAAQxH,OACrBsH,EAASC,eAAe1F,GAAOH,KAAKuB,MAAMsE,eAAe1F,GAEhC,mBAAd4F,IACTH,EAASzF,GAAOH,KAAKgG,oBAAoBD,GAAW,KAM5D,OAAOH,IAER,CACDzF,IAAK,kBACL3B,MAAO,SAAyB0D,EAASuD,MACxC,CACDtF,IAAK,cACL3B,MAAO,SAAqByH,EAAQR,MACnC,CACDtF,IAAK,OACL3B,MAAO,SAAcyH,EAAQR,MAC5B,CACDtF,IAAK,gBACL3B,MAAO,SAAuBiH,QAGzBH,EAhEY,G,YCDjBY,EAAS,CACXC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,cAAe,GAMF,GACbC,KAAM,WACNC,aAAc,CAACC,EAAA,GACflG,GAfO,w7BAgBPC,GAfO,4EAgBPkG,OATW,CACX,+BAAgC,4xBAChC,yBAA0B,wFAQ1BC,YAAa,SAAqBpB,GAChC,IAAKA,IAASA,EAAK7C,SACjB,MAAO,GAGT,IAAIkE,EAAwBrB,EAAKsB,gBAC7BA,OAA4C,IAA1BD,GAA0CA,EAC5DE,EAAuBvB,EAAKwB,eAC5BA,OAA0C,IAAzBD,EAAkC,IAAQA,EAC3DE,EAAuBzB,EAAK0B,eAC5BA,OAA0C,IAAzBD,EAAkC,SAAWA,EAC9DE,EAAgB3B,EAAK2B,cACrBxE,EAAW6C,EAAK7C,SACpB,MAAO,CACLyE,iBAAkBC,QAAQP,GAAmBK,GAAiBxE,EAAS2E,cAAcH,IACrFI,gBAAiBP,EACjBQ,gBAAiBrB,EAAOe,IAAmB,EAC3CO,kBAAmBN,EAAgBxE,EAAS+E,UAAU,CAACP,EAAc9H,EAAIsD,EAAStD,EAAG8H,EAAcQ,EAAIhF,EAASgF,IAAM,CAAC,EAAG,MCnB5H,EAAoB,SAAUC,GAGhC,SAASC,IAGP,OAFA,YAAgB5H,KAAM4H,GAEf,YAA2B5H,KAAM,YAAgB4H,GAAmB3H,MAAMD,KAAME,YAiEzF,OAtEA,YAAU0H,EAAmBD,GAQ7B,YAAaC,EAAmB,CAAC,CAC/BzH,IAAK,aACL3B,MAAO,SAAoBiH,GACzB,MAAO,CACLhF,QAAS,CAAC,MAGb,CACDN,IAAK,kBACL3B,MAAO,SAAyB0D,EAASuD,GACvC,IAAIoC,EAAQ7H,KAER8H,EAAmB9H,KAAKY,sBAExBkH,GACFA,EAAiBC,IAAI,CACnBC,gBAAiB,CACfjH,KAAM,EACNI,SAAU,oBACV8G,QAASjI,KAAKuB,MAAM2G,mBAAqBzC,EAAU0C,2BACnDC,iBAAkB,CAChBJ,gBAAiB,CACfK,QAAS,GAEXC,wBAAyB,CACvBD,QAAS,OAOnB5C,EAAU8C,YAAc,WACtBV,EAAMW,kBAAkBC,kBAGtBzI,KAAKkC,QAAQwG,MACf1I,KAAKkC,QAAQwG,KAAKC,aAAaC,GAAG,CAChCC,YAAapD,EAAU8C,YACvBO,aAAcrD,EAAU8C,gBAI7B,CACDpI,IAAK,gBACL3B,MAAO,SAAuBiH,GACxBzF,KAAKkC,QAAQwG,MACf1I,KAAKkC,QAAQwG,KAAKC,aAAaI,IAAI,CACjCF,YAAapD,EAAU8C,YACvBO,aAAcrD,EAAU8C,gBAI7B,CACDpI,IAAK,6BACL3B,MAAO,SAAoCwK,GACzCA,EAAUC,UAAW,EACrBD,EAAUxK,MAAQ,IAAIiF,aAAa,OAKhCmE,EAvEe,CAwEtB,GAGF,EAAkBsB,cAAgB,oBAClC,EAAkB/K,aAtFC,CACjB+J,kBAAmB,CACjB5J,KAAM,WACNE,MAAO,CAAC,EAAG,IAEbyI,eAAgB,SAChBJ,iBAAiB,EACjBE,eAAgB,K,4BCJZoC,EAAe,CAAC,IAAK,EAAG,GACxBC,EAAe,CAAC,GAAI,IAAK,KAElBC,EAAe,CAAC,CAAC,GAAI,IAAK,MAC1BC,EAAgB,CAAC,CAAC,IAAK,EAAG,IAEjCC,EAAoB,IAAI3B,E,IAyFxB4B,E,YAWJ,WAAajI,GAAe,aAC1B,cAAMA,IAAN,MATFY,MAAgB,CACdsH,KAAM,GACNC,gBAAgB,EAChBC,YAAa,IACbjK,YAAa,EACbkK,QAAS,IAKT,EAAKC,UAAY,KAEjB,EAAKC,UAAY,CACfC,OAAQ,EAAE,IAAK,MACfC,KAAM,EACNC,MAAO,KACPC,QAAS,GARe,E,4CAY5BC,QAAA,WAAU,WACR,YAAMA,QAAN,WACAC,MA1HF,0FA2HKC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,YAAgB,IAAdG,EAAc,EAAdA,SACN,EAAKnI,SAAS,CACZoH,KAAMe,IACL,WACD,EAAKC,uB,EAKbC,qBAAA,WAEM1K,KAAK6J,WAEP7J,KAAK6J,UAAUc,SAEjB,YAAMD,qBAAN,Y,EAGFD,cAAA,WAAiB,aAOXzK,KAAKmC,MAPM,IAEbuH,sBAFa,aAGbC,mBAHa,MAGC,IAHD,MAIbjK,mBAJa,MAIC,EAJD,MAKbkK,eALa,MAKH,GALG,IApHnB,SAAsBH,GACpB,IAAKA,IAASA,EAAKhI,OACjB,MAAO,GAET,IAAMmJ,EAAc,GACdC,EAAiB,GACjBC,EAAiB,GACjBC,EAAa,GAEnBtB,EAAKuB,SAAQ,SAACC,EAAQ9F,GAAM,MACgB8F,EAAOC,WAA1CC,EADmB,EACnBA,MAAiBC,EADE,EACZC,SACR7M,EAAQ,CAAC8M,KAAM,EAAGC,KAAM,GAE9BtI,OAAOuI,KAAKL,GAAOH,SAAQ,SAACS,GAI1B,GAHAjN,EAAM2M,EAAMM,GAAQ,EAAI,OAAS,SAAWN,EAAMM,KAG9CC,KAAKC,IAAIR,EAAMM,IAAS,IAA5B,CAGA,IAAMG,EAAU,CAACzG,EAAGxG,OAAO8M,IAAOI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAGC,KAAK,KAEvDC,EAAiBxC,EAAKgC,GAAMP,WAAWG,SACvCC,EAAOI,KAAKQ,KAAKf,EAAMM,IAG7BX,EAAQqB,KAAK,CACX9M,SAAU4M,EACV7F,OAAQgF,EAER7E,KAAMkD,EAAKgC,GAAMP,WAAW3E,KAC5B6F,OAAQ,EACRd,MAAOA,IAILP,EAAMa,KAIVb,EAAMa,IAAW,EAEjBhB,EAAKuB,KAAK,CACR/F,OAAQkF,EAAO,EAAIF,EAAiBa,EACpC9F,OAAQmF,EAAO,EAAIW,EAAiBb,EACpC5M,MAAO2M,EAAMM,UAKjBZ,EAAQsB,KAAR,iBACK3N,EADL,CAEEa,SAAU,CAAC+L,EAAe,GAAIA,EAAe,GAAI,IACjDiB,IAAK7N,EAAM8M,KAAO9M,EAAM+M,KACxBhF,KAAM0E,EAAOC,WAAW3E,WAK5BsE,EAAQgB,MAAK,SAACC,EAAGC,GAAJ,OAAUL,KAAKC,IAAII,EAAEM,KAAOX,KAAKC,IAAIG,EAAEO,QACpD,IAAMC,EAAYC,cACfC,OAAO,CAAC,EAAGd,KAAKC,IAAId,EAAQ,GAAGwB,OAC/BI,MAAM,CAAC,GAAI,MAMd,OAJA5B,EAAQG,SAAQ,SAAA0B,GACdA,EAAGN,OAASV,KAAKiB,KAAKL,EAAUZ,KAAKC,IAAIe,EAAGL,UAGvC,CAACzB,OAAMC,UAASC,WAwDc8B,CARpB,EAMbnD,MAEMmB,EARO,EAQPA,KAAMC,EARC,EAQDA,QAASC,EARR,EAQQA,QACvB,IACE,IAAMvJ,EAAQ,CACZsL,OAAQ,CACN,IAAI9M,IAAiB,CACnBK,GAAI,UACJqJ,KAAMqB,EACN/D,eAAgB4C,EAChB9C,gBAAiB6C,EAEjBrL,YAAaqL,EAAiB,IAAO,EACrCnK,aAAc,SAACuN,GAAD,OAA2BA,EAAExB,KAAO,EAAIlC,EAAeD,GACrE4D,WAAY,CAACxD,KAEf,IAAIxJ,IAAiB,CACnBK,GAAI,eACJqJ,KAAMoB,EACN9D,eAAgB4C,EAChB5K,mBAAoB,EACpBE,SAAS,EACTC,QAAQ,EACR2H,gBAAiB6C,EAEjBrL,YAAaqL,EAAiB,IAAO,EACrClK,aAAc,SAACsN,GAAD,OAA0BA,EAAET,IAAM,EAAIjD,EAAeD,GACnE4D,WAAY,CAACxD,KAEf,IAAIxJ,IAAiB,CACnBK,GAAI,UACJqJ,KAAMoB,EACN9D,eAAgB4C,EAChB9C,gBAAiB6C,EACjBsD,UAAU,EACV3O,YAAa,IACbkB,aAAc,SAACuN,GAAD,OAA0BA,EAAET,IAAM,EAAIjD,EAAeD,GACnE4D,WAAY,CAACxD,KAEf,IAAI7E,EAAS,CACXtE,GAAI,MACJqJ,KAAMmB,EACN1G,SAAUxE,EACVkK,UACA7C,eAAgB4C,EAChB9C,gBAAiB6C,EACjB9F,kBAAmB,SAACkJ,GAAD,OAAyBA,EAAE3G,QAC9CrC,kBAAmB,SAACgJ,GAAD,OAAyBA,EAAE1G,QAC9CpC,eAAgBmF,EAChBlF,eAAgBmF,EAChB2D,WAAY,CAACxD,OAIdvJ,KAAK6J,UAeR7J,KAAK6J,UAAUoD,SAAS1L,IAdxB2L,QAAQC,IAAInN,KAAK6J,WACjB7J,KAAK6J,UAAY,IAAIuD,IAAY,OAAQ7L,EAAO,CAC9C8L,WAAW,EACXC,qBAAqB,EACrBC,sBAAsB,EACtBC,YAAa,WAAM,MACjB,YAAKC,mBAAL,SAAkBxF,YAItBjI,KAAK0N,IAAIC,SAAS3N,KAAK6J,WAEvBqD,QAAQC,IAAInN,KAAK6J,YAInB,MAAO+D,GACPV,QAAQW,MAAMD,K,GA3HGE,WAgIRtE","file":"component---src-pages-brushing-index-tsx-6bf8ea3d80a9969e506b.js","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n\nvar ScatterplotLayer = function (_Layer) {\n  _inherits(ScatterplotLayer, _Layer);\n\n  function ScatterplotLayer() {\n    _classCallCheck(this, ScatterplotLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScatterplotLayer).apply(this, arguments));\n  }\n\n  _createClass(ScatterplotLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(id) {\n      return _get(_getPrototypeOf(ScatterplotLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceRadius: {\n          size: 1,\n          transition: true,\n          accessor: 'getRadius',\n          defaultValue: 1\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ScatterplotLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          radiusUnits = _this$props.radiusUnits,\n          radiusScale = _this$props.radiusScale,\n          radiusMinPixels = _this$props.radiusMinPixels,\n          radiusMaxPixels = _this$props.radiusMaxPixels,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels;\n      var pointRadiusMultiplier = radiusUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      var lineWidthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled: filled,\n        radiusScale: radiusScale * pointRadiusMultiplier,\n        radiusMinPixels: radiusMinPixels,\n        radiusMaxPixels: radiusMaxPixels,\n        lineWidthScale: lineWidthScale * lineWidthMultiplier,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n      return new Model(gl, Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 3,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return ScatterplotLayer;\n}(Layer);\n\nexport { ScatterplotLayer as default };\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;","export default \"#define SHADER_NAME scatterplot-layer-vertex-shader\\n\\nattribute vec3 positions;\\n\\nattribute vec3 instancePositions;\\nattribute vec3 instancePositions64Low;\\nattribute float instanceRadius;\\nattribute float instanceLineWidths;\\nattribute vec4 instanceFillColors;\\nattribute vec4 instanceLineColors;\\nattribute vec3 instancePickingColors;\\n\\nuniform float opacity;\\nuniform float radiusScale;\\nuniform float radiusMinPixels;\\nuniform float radiusMaxPixels;\\nuniform float lineWidthScale;\\nuniform float lineWidthMinPixels;\\nuniform float lineWidthMaxPixels;\\nuniform float stroked;\\nuniform bool filled;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\nvarying float outerRadiusPixels;\\n\\nvoid main(void) {\\n  geometry.worldPosition = instancePositions;\\n  outerRadiusPixels = clamp(\\n    project_size_to_pixel(radiusScale * instanceRadius),\\n    radiusMinPixels, radiusMaxPixels\\n  );\\n  float lineWidthPixels = clamp(\\n    project_size_to_pixel(lineWidthScale * instanceLineWidths),\\n    lineWidthMinPixels, lineWidthMaxPixels\\n  );\\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\\n  unitPosition = positions.xy;\\n  geometry.uv = unitPosition;\\n  geometry.pickingColor = instancePickingColors;\\n\\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\\n  \\n  vec3 offset = positions * project_pixel_size(outerRadiusPixels);\\n  DECKGL_FILTER_SIZE(offset, geometry);\\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\\n}\\n\";","export default \"#define SHADER_NAME scatterplot-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform bool filled;\\nuniform float stroked;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\nvarying float outerRadiusPixels;\\n\\nvoid main(void) {\\n  geometry.uv = unitPosition;\\n\\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\\n  float inCircle = smoothedge(distToCenter, outerRadiusPixels);\\n\\n  if (inCircle == 0.0) {\\n    discard;\\n  }\\n\\n  if (stroked > 0.5) {\\n    float isLine = smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter);\\n    if (filled) {\\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\\n    } else {\\n      if (isLine == 0.0) {\\n        discard;\\n      }\\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\\n    }\\n  } else if (filled) {\\n    gl_FragColor = vFillColor;\\n  } else {\\n    discard;\\n  }\\n\\n  gl_FragColor.a *= inCircle;\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  greatCircle: false,\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\n\nvar ArcLayer = function (_Layer) {\n  _inherits(ArcLayer, _Layer);\n\n  function ArcLayer() {\n    _classCallCheck(this, ArcLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ArcLayer).apply(this, arguments));\n  }\n\n  _createClass(ArcLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(ArcLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceSourceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getSourceColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceTargetColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getTargetColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        },\n        instanceHeights: {\n          size: 1,\n          transition: true,\n          accessor: 'getHeight',\n          defaultValue: 1\n        },\n        instanceTilts: {\n          size: 1,\n          transition: true,\n          accessor: 'getTilt',\n          defaultValue: 0\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ArcLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          widthUnits = _this$props.widthUnits,\n          widthScale = _this$props.widthScale,\n          widthMinPixels = _this$props.widthMinPixels,\n          widthMaxPixels = _this$props.widthMaxPixels,\n          greatCircle = _this$props.greatCircle;\n      var widthMultiplier = widthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        greatCircle: greatCircle,\n        widthScale: widthScale * widthMultiplier,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [];\n      var NUM_SEGMENTS = 50;\n\n      for (var i = 0; i < NUM_SEGMENTS; i++) {\n        positions = positions.concat([i, 1, 0, i, -1, 0]);\n      }\n\n      var model = new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n      model.setUniforms({\n        numSegments: NUM_SEGMENTS\n      });\n      return model;\n    }\n  }]);\n\n  return ArcLayer;\n}(Layer);\n\nexport { ArcLayer as default };\nArcLayer.layerName = 'ArcLayer';\nArcLayer.defaultProps = defaultProps;","export default \"#define SHADER_NAME arc-layer-vertex-shader\\n\\nattribute vec3 positions;\\nattribute vec4 instanceSourceColors;\\nattribute vec4 instanceTargetColors;\\nattribute vec3 instanceSourcePositions;\\nattribute vec3 instanceSourcePositions64Low;\\nattribute vec3 instanceTargetPositions;\\nattribute vec3 instanceTargetPositions64Low;\\nattribute vec3 instancePickingColors;\\nattribute float instanceWidths;\\nattribute float instanceHeights;\\nattribute float instanceTilts;\\n\\nuniform bool greatCircle;\\nuniform float numSegments;\\nuniform float opacity;\\nuniform float widthScale;\\nuniform float widthMinPixels;\\nuniform float widthMaxPixels;\\n\\nvarying vec4 vColor;\\nvarying vec2 uv;\\nvarying float isValid;\\n\\nfloat paraboloid(float distance, float sourceZ, float targetZ, float ratio) {\\n\\n  float deltaZ = targetZ - sourceZ;\\n  float dh = distance * instanceHeights;\\n  float unitZ = dh == 0.0 ? 0.0 : deltaZ / dh;\\n  float p2 = unitZ * unitZ + 1.0;\\n  float dir = step(deltaZ, 0.0);\\n  float z0 = mix(sourceZ, targetZ, dir);\\n  float r = mix(ratio, 1.0 - ratio, dir);\\n  return sqrt(r * (p2 - r)) * dh + z0;\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  return dir_screenspace * offset_direction * width / 2.0;\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\\n}\\n\\nvec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {\\n  float distance = length(source.xy - target.xy);\\n  float z = paraboloid(distance, source.z, target.z, segmentRatio);\\n\\n  float tiltAngle = radians(instanceTilts);\\n  vec2 tiltDirection = normalize(target.xy - source.xy);\\n  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);\\n\\n  return vec3(\\n    mix(source.xy, target.xy, segmentRatio) + tilt,\\n    z * cos(tiltAngle)\\n  );\\n}\\nfloat getAngularDist (vec2 source, vec2 target) {\\n  vec2 sourceRadians = radians(source);\\n  vec2 targetRadians = radians(target);\\n  vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);\\n  vec2 shd_sq = sin_half_delta * sin_half_delta;\\n\\n  float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;\\n  return 2.0 * asin(sqrt(a));\\n}\\n\\nvec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {\\n  vec2 lngLat;\\n  if(abs(angularDist - PI) < 0.001) {\\n    lngLat = (1.0 - t) * source.xy + t * target.xy;\\n  } else {\\n    float a = sin((1.0 - t) * angularDist);\\n    float b = sin(t * angularDist);\\n    vec3 p = source3D.yxz * a + target3D.yxz * b;\\n    lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));\\n  }\\n\\n  float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);\\n\\n  return vec3(lngLat, z);\\n}\\n\\nvoid main(void) {\\n  geometry.worldPosition = instanceSourcePositions;\\n  geometry.worldPositionAlt = instanceTargetPositions;\\n\\n  float segmentIndex = positions.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n  isValid = 1.0;\\n\\n  uv = vec2(segmentRatio, positions.y);\\n  geometry.uv = uv;\\n  geometry.pickingColor = instancePickingColors;\\n\\n  vec4 curr;\\n  vec4 next;\\n  vec3 source;\\n  vec3 target;\\n\\n  if ((greatCircle || project_uProjectionMode == PROJECTION_MODE_GLOBE) && project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\\n    source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));\\n    target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));\\n    float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);\\n  \\n    float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));\\n    float nextSegmentRatio = getSegmentRatio(min(numSegments, segmentIndex + 1.0));\\n\\n    vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);\\n    vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);\\n    vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);\\n\\n    if (abs(currPos.x - prevPos.x) > 180.0) {\\n      indexDir = -1.0;\\n      isValid = 0.0;\\n    } else if (abs(currPos.x - nextPos.x) > 180.0) {\\n      indexDir = 1.0;\\n      isValid = 0.0;\\n    }\\n    nextPos = indexDir < 0.0 ? prevPos : nextPos;\\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\\n\\n    if (isValid == 0.0) {\\n      nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;\\n      float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);\\n      currPos = mix(currPos, nextPos, t);\\n      segmentRatio = mix(segmentRatio, nextSegmentRatio, t);\\n    }\\n\\n    vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);\\n    vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);\\n  \\n    curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);\\n    next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));\\n  \\n  } else {\\n    source = project_position(instanceSourcePositions, instanceSourcePositions64Low);\\n    target = project_position(instanceTargetPositions, instanceTargetPositions64Low);\\n\\n    float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n    vec3 currPos = interpolateFlat(source, target, segmentRatio);\\n    vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);\\n    curr = project_common_position_to_clipspace(vec4(currPos, 1.0));\\n    next = project_common_position_to_clipspace(vec4(nextPos, 1.0));\\n    geometry.position = vec4(currPos, 1.0);\\n  }\\n  float widthPixels = clamp(\\n    project_size_to_pixel(instanceWidths * widthScale),\\n    widthMinPixels, widthMaxPixels\\n  );\\n  vec3 offset = vec3(\\n    getExtrusionOffset((next.xy - curr.xy) * indexDir, positions.y, widthPixels),\\n    0.0);\\n  DECKGL_FILTER_SIZE(offset, geometry);\\n  gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n\\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);\\n  vColor = vec4(color.rgb, color.a * opacity);\\n  DECKGL_FILTER_COLOR(vColor, geometry);\\n}\\n\";","export default \"#define SHADER_NAME arc-layer-fragment-shader\\n\\nprecision highp float;\\n\\nvarying vec4 vColor;\\nvarying vec2 uv;\\nvarying float isValid;\\n\\nvoid main(void) {\\n  if (isValid == 0.0) {\\n    discard;\\n  }\\n\\n  gl_FragColor = vColor;\\n  geometry.uv = uv;\\n\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { deepEqual } from '../utils/deep-equal';\n\nvar LayerExtension = function () {\n  function LayerExtension() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LayerExtension);\n\n    this.opts = opts;\n  }\n\n  _createClass(LayerExtension, [{\n    key: \"equals\",\n    value: function equals(extension) {\n      if (this === extension) {\n        return true;\n      }\n\n      return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      return null;\n    }\n  }, {\n    key: \"getSubLayerProps\",\n    value: function getSubLayerProps(extension) {\n      var _extension$constructo = extension.constructor.defaultProps,\n          defaultProps = _extension$constructo === void 0 ? {} : _extension$constructo;\n      var newProps = {\n        updateTriggers: {}\n      };\n\n      for (var key in defaultProps) {\n        if (key in this.props) {\n          var propDef = defaultProps[key];\n          var propValue = this.props[key];\n          newProps[key] = propValue;\n\n          if (propDef && propDef.type === 'accessor') {\n            newProps.updateTriggers[key] = this.props.updateTriggers[key];\n\n            if (typeof propValue === 'function') {\n              newProps[key] = this.getSubLayerAccessor(propValue, true);\n            }\n          }\n        }\n      }\n\n      return newProps;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {}\n  }, {\n    key: \"updateState\",\n    value: function updateState(params, extension) {}\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {}\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(extension) {}\n  }]);\n\n  return LayerExtension;\n}();\n\nexport { LayerExtension as default };","import { project } from '@deck.gl/core';\nvar vs = \"\\n  uniform bool brushing_enabled;\\n  uniform int brushing_target;\\n  uniform vec2 brushing_mousePos;\\n  uniform float brushing_radius;\\n\\n  #ifdef NON_INSTANCED_MODEL\\n  attribute vec2 brushingTargets;\\n  #else\\n  attribute vec2 instanceBrushingTargets;\\n  #endif\\n\\n  varying float brushing_isVisible;\\n\\n  bool brushing_isPointInRange(vec2 position) {\\n    if (!brushing_enabled) {\\n      return true;\\n    }\\n    vec2 source_commonspace = project_position(position);\\n    vec2 target_commonspace = project_position(brushing_mousePos);\\n    float distance = length((target_commonspace - source_commonspace) / project_uCommonUnitsPerMeter.xy);\\n\\n    return distance <= brushing_radius;\\n  }\\n\\n  bool brushing_arePointsInRange(vec2 sourcePos, vec2 targetPos) {\\n    return brushing_isPointInRange(sourcePos) || brushing_isPointInRange(targetPos);\\n  }\\n\\n  void brushing_setVisible(bool visible) {\\n    brushing_isVisible = float(visible);\\n  }\\n\";\nvar fs = \"\\n  uniform bool brushing_enabled;\\n  varying float brushing_isVisible;\\n\";\nvar TARGET = {\n  source: 0,\n  target: 1,\n  custom: 2,\n  source_target: 3\n};\nvar inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': \"\\n    vec2 brushingTarget;\\n    vec2 brushingSource;\\n    if (brushing_target == 3) {\\n      brushingTarget = geometry.worldPositionAlt.xy;\\n      brushingSource = geometry.worldPosition.xy;\\n    } else if (brushing_target == 0) {\\n      brushingTarget = geometry.worldPosition.xy;\\n    } else if (brushing_target == 1) {\\n      brushingTarget = geometry.worldPositionAlt.xy;\\n    } else {\\n      #ifdef NON_INSTANCED_MODEL\\n      brushingTarget = brushingTargets;\\n      #else\\n      brushingTarget = instanceBrushingTargets;\\n      #endif\\n    }\\n    bool visible;\\n    if (brushing_target == 3) {\\n      visible = brushing_arePointsInRange(brushingSource, brushingTarget);\\n    } else {\\n      visible = brushing_isPointInRange(brushingTarget);\\n    }\\n    brushing_setVisible(visible);\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (brushing_enabled && brushing_isVisible < 0.5) {\\n      discard;\\n    }\\n  \"\n};\nexport default {\n  name: 'brushing',\n  dependencies: [project],\n  vs: vs,\n  fs: fs,\n  inject: inject,\n  getUniforms: function getUniforms(opts) {\n    if (!opts || !opts.viewport) {\n      return {};\n    }\n\n    var _opts$brushingEnabled = opts.brushingEnabled,\n        brushingEnabled = _opts$brushingEnabled === void 0 ? true : _opts$brushingEnabled,\n        _opts$brushingRadius = opts.brushingRadius,\n        brushingRadius = _opts$brushingRadius === void 0 ? 10000 : _opts$brushingRadius,\n        _opts$brushingTarget = opts.brushingTarget,\n        brushingTarget = _opts$brushingTarget === void 0 ? 'source' : _opts$brushingTarget,\n        mousePosition = opts.mousePosition,\n        viewport = opts.viewport;\n    return {\n      brushing_enabled: Boolean(brushingEnabled && mousePosition && viewport.containsPixel(mousePosition)),\n      brushing_radius: brushingRadius,\n      brushing_target: TARGET[brushingTarget] || 0,\n      brushing_mousePos: mousePosition ? viewport.unproject([mousePosition.x - viewport.x, mousePosition.y - viewport.y]) : [0, 0]\n    };\n  }\n};","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { LayerExtension } from '@deck.gl/core';\nimport shaderModule from './shader-module';\nvar defaultProps = {\n  getBrushingTarget: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nvar BrushingExtension = function (_LayerExtension) {\n  _inherits(BrushingExtension, _LayerExtension);\n\n  function BrushingExtension() {\n    _classCallCheck(this, BrushingExtension);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BrushingExtension).apply(this, arguments));\n  }\n\n  _createClass(BrushingExtension, [{\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      return {\n        modules: [shaderModule]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      var _this = this;\n\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.add({\n          brushingTargets: {\n            size: 2,\n            accessor: 'getBrushingTarget',\n            update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n            shaderAttributes: {\n              brushingTargets: {\n                divisor: 0\n              },\n              instanceBrushingTargets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n\n      extension.onMouseMove = function () {\n        _this.getCurrentLayer().setNeedsRedraw();\n      };\n\n      if (this.context.deck) {\n        this.context.deck.eventManager.on({\n          pointermove: extension.onMouseMove,\n          pointerleave: extension.onMouseMove\n        });\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(extension) {\n      if (this.context.deck) {\n        this.context.deck.eventManager.off({\n          pointermove: extension.onMouseMove,\n          pointerleave: extension.onMouseMove\n        });\n      }\n    }\n  }, {\n    key: \"useConstantTargetPositions\",\n    value: function useConstantTargetPositions(attribute) {\n      attribute.constant = true;\n      attribute.value = new Float32Array(2);\n      return;\n    }\n  }]);\n\n  return BrushingExtension;\n}(LayerExtension);\n\nexport { BrushingExtension as default };\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;","import DeckGLLayer from 'maptalks.deckgl';\nimport { ScatterplotLayer, ArcLayer } from '@deck.gl/layers';\n// @ts-ignore\nimport { BrushingExtension } from '@deck.gl/extensions';\nimport { scaleLinear } from 'd3-scale';\nimport Base from '../base';\n\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/arc/counties.json'; // eslint-disable-line\n\nconst SOURCE_COLOR = [166, 3, 3];\nconst TARGET_COLOR = [35, 181, 184];\n\nexport const inFlowColors = [[35, 181, 184]];\nexport const outFlowColors = [[166, 3, 3]];\n\nconst brushingExtension = new BrushingExtension();\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data: any;\n  x?: number;\n  y?: number;\n  hoveredObject?: any;\n\n  enableBrushing: boolean;\n  brushRadius: number;\n  strokeWidth: number;\n  opacity: number;\n}\n\nfunction getLayerData(data: any[]) {\n  if (!data || !data.length) {\n    return {};\n  }\n  const arcs: any[] = [];\n  const targets: any[] = [];\n  const sources: any[] = [];\n  const pairs: any = {};\n\n  data.forEach((county, i) => {\n    const {flows, centroid: targetCentroid} = county.properties;\n    const value = {gain: 0, loss: 0};\n\n    Object.keys(flows).forEach((toId: string | number) => {\n      value[flows[toId] > 0 ? 'gain' : 'loss'] += flows[toId];\n\n      // if number too small, ignore it\n      if (Math.abs(flows[toId]) < 50) {\n        return;\n      }\n      const pairKey = [i, Number(toId)].sort((a, b) => a - b).join('-');\n      // @ts-ignore\n      const sourceCentroid = data[toId].properties.centroid;\n      const gain = Math.sign(flows[toId]);\n\n      // add point at arc source\n      sources.push({\n        position: sourceCentroid,\n        target: targetCentroid,\n        // @ts-ignore\n        name: data[toId].properties.name,\n        radius: 3,\n        gain: -gain\n      });\n\n      // eliminate duplicates arcs\n      if (pairs[pairKey]) {\n        return;\n      }\n\n      pairs[pairKey] = true;\n\n      arcs.push({\n        target: gain > 0 ? targetCentroid : sourceCentroid,\n        source: gain > 0 ? sourceCentroid : targetCentroid,\n        value: flows[toId]\n      });\n    });\n\n    // add point at arc target\n    targets.push({\n      ...value,\n      position: [targetCentroid[0], targetCentroid[1], 10],\n      net: value.gain + value.loss,\n      name: county.properties.name\n    });\n  });\n\n  // sort targets by radius large -> small\n  targets.sort((a, b) => Math.abs(b.net) - Math.abs(a.net));\n  const sizeScale = scaleLinear()\n    .domain([0, Math.abs(targets[0].net)])\n    .range([36, 400]);\n\n  targets.forEach(pt => {\n    pt.radius = Math.sqrt(sizeScale(Math.abs(pt.net)));\n  });\n\n  return {arcs, targets, sources};\n}\n\nclass Brushing extends Base {\n  private deckLayer: DeckGLLayer | null;\n\n  state: IState = {\n    data: [],\n    enableBrushing: true,\n    brushRadius: 100000,\n    strokeWidth: 2,\n    opacity: 0.7,\n  }\n\n  constructor (props: IProps) {\n    super(props);\n    this.deckLayer = null;\n\n    this.viewState = {\n      center: [-100, 40.7],\n      zoom: 3,\n      pitch: 40.5,\n      bearing: 0,\n    };\n  }\n\n  initMap() {\n    super.initMap();\n    fetch(DATA_URL)\n      .then(response => response.json())\n      .then(({features}) => {\n        this.setState({\n          data: features\n        }, () => {\n          this._renderLayers();\n        })\n      })\n  }\n\n  componentWillUnmount () {\n    // this.map.remove()\n    if (this.deckLayer) {\n      // @ts-ignore\n      this.deckLayer.remove()\n    }\n    super.componentWillUnmount();\n  }\n\n  _renderLayers () {\n    const {\n      enableBrushing = true,\n      brushRadius = 100000,\n      strokeWidth = 2,\n      opacity = 0.7,\n      data,\n    } = this.state;\n    const { arcs, targets, sources } = getLayerData(data);\n    try {\n      const props = {\n        layers: [\n          new ScatterplotLayer({\n            id: 'sources',\n            data: sources,\n            brushingRadius: brushRadius,\n            brushingEnabled: enableBrushing,\n            // only show source points when brushing\n            radiusScale: enableBrushing ? 3000 : 0,\n            getFillColor: (d: { gain: number; }) => (d.gain > 0 ? TARGET_COLOR : SOURCE_COLOR),\n            extensions: [brushingExtension]\n          }),\n          new ScatterplotLayer({\n            id: 'targets-ring',\n            data: targets,\n            brushingRadius: brushRadius,\n            lineWidthMinPixels: 2,\n            stroked: true,\n            filled: false,\n            brushingEnabled: enableBrushing,\n            // only show rings when brushing\n            radiusScale: enableBrushing ? 4000 : 0,\n            getLineColor: (d: { net: number; }) => (d.net > 0 ? TARGET_COLOR : SOURCE_COLOR),\n            extensions: [brushingExtension]\n          }),\n          new ScatterplotLayer({\n            id: 'targets',\n            data: targets,\n            brushingRadius: brushRadius,\n            brushingEnabled: enableBrushing,\n            pickable: true,\n            radiusScale: 3000,\n            getFillColor: (d: { net: number; }) => (d.net > 0 ? TARGET_COLOR : SOURCE_COLOR),\n            extensions: [brushingExtension]\n          }),\n          new ArcLayer({\n            id: 'arc',\n            data: arcs,\n            getWidth: strokeWidth,\n            opacity,\n            brushingRadius: brushRadius,\n            brushingEnabled: enableBrushing,\n            getSourcePosition: (d: { source: any; }) => d.source,\n            getTargetPosition: (d: { target: any; }) => d.target,\n            getSourceColor: SOURCE_COLOR,\n            getTargetColor: TARGET_COLOR,\n            extensions: [brushingExtension]\n          })\n        ],\n      }\n      if (!this.deckLayer) {\n        console.log(this.deckLayer);\n        this.deckLayer = new DeckGLLayer('deck', props, {\n          animation: true,\n          forceRenderOnMoving: true,\n          forceRenderOnZooming: true,\n          renderStart: () => {\n            this.renderState?.update();\n          },\n        });\n\n        this.map.addLayer(this.deckLayer);\n\n        console.log(this.deckLayer);\n      } else {\n        this.deckLayer.setProps(props);\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n}\n\nexport default Brushing;\n"],"sourceRoot":""}