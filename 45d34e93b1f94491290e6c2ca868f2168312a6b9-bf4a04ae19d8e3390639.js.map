{"version":3,"sources":["webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-vertex.glsl.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/scatterplot-layer/scatterplot-layer-fragment.glsl.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson.js","webpack:////Users/sakitam-fdd/Documents/workspace/github/maptalks.deckgl/node_modules/@deck.gl/layers/dist/esm/geojson-layer/geojson-layer.js"],"names":["DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","_Layer","ScatterplotLayer","this","apply","arguments","key","id","prototype","call","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","_ref","oldProps","changeFlags","extensionsChanged","gl","context","state","model","setState","_getModel","invalidateAll","_ref2","uniforms","viewport","_this$props","pointRadiusMultiplier","metersPerPixel","lineWidthMultiplier","setUniforms","draw","Object","assign","getShaders","geometry","drawMode","vertexCount","attributes","positions","Float32Array","isInstanced","layerName","separateGeojsonFeatures","features","wrapFeature","dataRange","undefined","separated","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","_dataRange$startRow","startRow","_dataRange$endRow","endRow","featureIndex","feature","log","assert","Array","isArray","geometries","i","subGeometry","separateGeometry","sourceFeature","sourceFeatureIndex","coordinates","nestLevel","COORDINATE_NEST_LEVEL","concat","isFinite","validateGeometry","push","forEach","point","path","polygon","warn","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","extruded","wireframe","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusUnits","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","getElevation","material","getCoordinates","f","_CompositeLayer","GeoJsonLayer","getLineDashArray","removed","dataChanged","geojson","getGeojsonFeatures","data","getSubLayerRow","bind","oldFeatures","newFeatures","featuresDiff","slice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","partialFeatures","_key","getIndex","__source","index","replace","err","_this$state","transitions","_this$props2","lineDashJustified","_this$props3","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","_dataDiff","getSubLayerAccessor","getPolygon","getSubLayerProps","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getWidth","getDashArray","getPath","highlightedObjectIndex","_getHighlightedIndex","findIndex","d"],"mappings":"uQAUIA,EAAgB,CAAC,EAAG,EAAG,EAAG,KAC1BC,EAAe,CACjBC,YAAa,SACbC,YAAa,CACXC,KAAM,SACNC,IAAK,EACLC,MAAO,GAETC,gBAAiB,CACfH,KAAM,SACNC,IAAK,EACLC,MAAO,GAETE,gBAAiB,CACfJ,KAAM,SACNC,IAAK,EACLC,MAAOG,OAAOC,kBAEhBC,eAAgB,SAChBC,eAAgB,CACdR,KAAM,SACNC,IAAK,EACLC,MAAO,GAETO,mBAAoB,CAClBT,KAAM,SACNC,IAAK,EACLC,MAAO,GAETQ,mBAAoB,CAClBV,KAAM,SACNC,IAAK,EACLC,MAAOG,OAAOC,kBAEhBK,SAAS,EACTC,QAAQ,EACRC,YAAa,CACXb,KAAM,WACNE,MAAO,SAAeY,GACpB,OAAOA,EAAEC,WAGbC,UAAW,CACThB,KAAM,WACNE,MAAO,GAETe,aAAc,CACZjB,KAAM,WACNE,MAAON,GAETsB,aAAc,CACZlB,KAAM,WACNE,MAAON,GAETuB,aAAc,CACZnB,KAAM,WACNE,MAAO,GAETkB,YAAa,CACXC,cAAe,gBAEjBC,QAAS,CACPD,cAAe,WAEjBE,SAAU,CACRF,cAAe,CAAC,eAAgB,kBAIhC,EAAmB,SAAUG,GAG/B,SAASC,IAGP,OAFA,YAAgBC,KAAMD,GAEf,YAA2BC,KAAM,YAAgBD,GAAkBE,MAAMD,KAAME,YAiIxF,OAtIA,YAAUH,EAAkBD,GAQ5B,YAAaC,EAAkB,CAAC,CAC9BI,IAAK,aACL3B,MAAO,SAAoB4B,GACzB,OAAO,YAAK,YAAgBL,EAAiBM,WAAY,aAAcL,MAAMM,KAAKN,KAAM,CACtFO,GC5FO,81DD6FPC,GE7FO,q/BF8FPC,QAAS,CAACC,EAAA,EAAWC,EAAA,OAGxB,CACDR,IAAK,kBACL3B,MAAO,WACLwB,KAAKY,sBAAsBC,aAAa,CACtCC,kBAAmB,CACjBC,KAAM,EACNzC,KAAM,KACN0C,KAAMhB,KAAKiB,oBACXC,YAAY,EACZC,SAAU,eAEZC,eAAgB,CACdL,KAAM,EACNG,YAAY,EACZC,SAAU,YACVE,aAAc,GAEhBC,mBAAoB,CAClBP,KAAMf,KAAKuB,MAAMC,YAAYC,OAC7BP,YAAY,EACZQ,YAAY,EACZpD,KAAM,KACN6C,SAAU,eACVE,aAAc,CAAC,EAAG,EAAG,EAAG,MAE1BM,mBAAoB,CAClBZ,KAAMf,KAAKuB,MAAMC,YAAYC,OAC7BP,YAAY,EACZQ,YAAY,EACZpD,KAAM,KACN6C,SAAU,eACVE,aAAc,CAAC,EAAG,EAAG,EAAG,MAE1BO,mBAAoB,CAClBb,KAAM,EACNG,YAAY,EACZC,SAAU,eACVE,aAAc,OAInB,CACDlB,IAAK,cACL3B,MAAO,SAAqBqD,GAC1B,IAAIN,EAAQM,EAAKN,MACbO,EAAWD,EAAKC,SAChBC,EAAcF,EAAKE,YAQvB,GANA,YAAK,YAAgBhC,EAAiBM,WAAY,cAAeL,MAAMM,KAAKN,KAAM,CAChFuB,MAAOA,EACPO,SAAUA,EACVC,YAAaA,IAGXA,EAAYC,kBAAmB,CACjC,IAAIC,EAAKjC,KAAKkC,QAAQD,GAElBjC,KAAKmC,MAAMC,OACbpC,KAAKmC,MAAMC,MAAc,SAG3BpC,KAAKqC,SAAS,CACZD,MAAOpC,KAAKsC,UAAUL,KAExBjC,KAAKY,sBAAsB2B,mBAG9B,CACDpC,IAAK,OACL3B,MAAO,SAAcgE,GACnB,IAAIC,EAAWD,EAAMC,SACjBC,EAAW1C,KAAKkC,QAAQQ,SACxBC,EAAc3C,KAAKuB,MACnBnD,EAAcuE,EAAYvE,YAC1BC,EAAcsE,EAAYtE,YAC1BI,EAAkBkE,EAAYlE,gBAC9BC,EAAkBiE,EAAYjE,gBAC9BO,EAAU0D,EAAY1D,QACtBC,EAASyD,EAAYzD,OACrBL,EAAiB8D,EAAY9D,eAC7BC,EAAiB6D,EAAY7D,eAC7BC,EAAqB4D,EAAY5D,mBACjCC,EAAqB2D,EAAY3D,mBACjC4D,EAAwC,WAAhBxE,EAA2BsE,EAASG,eAAiB,EAC7EC,EAAyC,WAAnBjE,EAA8B6D,EAASG,eAAiB,EAClF7C,KAAKmC,MAAMC,MAAMW,YAAYN,GAAUM,YAAY,CACjD9D,QAASA,EAAU,EAAI,EACvBC,OAAQA,EACRb,YAAaA,EAAcuE,EAC3BnE,gBAAiBA,EACjBC,gBAAiBA,EACjBI,eAAgBA,EAAiBgE,EACjC/D,mBAAoBA,EACpBC,mBAAoBA,IACnBgE,SAEJ,CACD7C,IAAK,YACL3B,MAAO,SAAmByD,GAExB,OAAO,IAAI,IAAMA,EAAIgB,OAAOC,OAAOlD,KAAKmD,aAAc,CACpD/C,GAAIJ,KAAKuB,MAAMnB,GACfgD,SAAU,IAAI,IAAS,CACrBC,SAAU,EACVC,YAAa,EACbC,WAAY,CACVC,UAAW,CACTzC,KAAM,EACNvC,MAAO,IAAIiF,aATH,EAAE,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,QAapDC,aAAa,SAKZ3D,EAvIc,CAwIrB,KAGF,EAAiB4D,UAAY,mBAC7B,EAAiBxF,aAAeA,G,4MGrMzB,SAASyF,EAAwBC,EAAUC,GAahD,IAZA,IAAIC,EAAY7D,UAAUuB,OAAS,QAAsBuC,IAAjB9D,UAAU,GAAmBA,UAAU,GAAK,GAChF+D,EAAY,CACdC,cAAe,GACfC,aAAc,GACdC,gBAAiB,GACjBC,uBAAwB,IAEtBC,EAAsBP,EAAUQ,SAChCA,OAAmC,IAAxBD,EAAiC,EAAIA,EAChDE,EAAoBT,EAAUU,OAC9BA,OAA+B,IAAtBD,EAA+BX,EAASpC,OAAS+C,EAErDE,EAAeH,EAAUG,EAAeD,EAAQC,IAAgB,CACvE,IAAIC,EAAUd,EAASa,GACvBE,EAAA,EAAIC,OAAOF,GAAWA,EAAQvB,SAAU,kCACxC,IAAIA,EAAWuB,EAAQvB,SAEvB,GAAsB,uBAAlBA,EAAS9E,KAA+B,CAC1CsG,EAAA,EAAIC,OAAOC,MAAMC,QAAQ3B,EAAS4B,YAAa,0CAG/C,IAFA,IAAIA,EAAa5B,EAAS4B,WAEjBC,EAAI,EAAGA,EAAID,EAAWvD,OAAQwD,IAAK,CAC1C,IAAIC,EAAcF,EAAWC,GAC7BE,EAAiBD,EAAajB,EAAWH,EAAaa,EAASD,SAGjES,EAAiB/B,EAAUa,EAAWH,EAAaa,EAASD,GAIhE,OAAOT,EAGT,SAASkB,EAAiB/B,EAAUa,EAAWH,EAAasB,EAAeC,GACzE,IAAI/G,EAAO8E,EAAS9E,KAChBgH,EAAclC,EAASkC,YACvBpB,EAAgBD,EAAUC,cAC1BC,EAAeF,EAAUE,aACzBC,EAAkBH,EAAUG,gBAC5BC,EAAyBJ,EAAUI,uBAEvC,GAqFK,SAA0B/F,EAAMgH,GACrC,IAAIC,EAAYC,EAAsBlH,GACtCsG,EAAA,EAAIC,OAAOU,EAAW,wBAAwBE,OAAOnH,IAErD,KAAOgH,KAAiBC,EAAY,GAClCD,EAAcA,EAAY,GAG5B,OAAOA,GAAe3G,OAAO+G,SAASJ,EAAY,IA7F7CK,CAAiBrH,EAAMgH,GAK5B,OAAQhH,GACN,IAAK,QACH4F,EAAc0B,KAAK9B,EAAY,CAC7BV,SAAUA,GACTgC,EAAeC,IAClB,MAEF,IAAK,aACHC,EAAYO,SAAQ,SAAUC,GAC5B5B,EAAc0B,KAAK9B,EAAY,CAC7BV,SAAU,CACR9E,KAAM,QACNgH,YAAaQ,IAEdV,EAAeC,OAEpB,MAEF,IAAK,aACHlB,EAAayB,KAAK9B,EAAY,CAC5BV,SAAUA,GACTgC,EAAeC,IAClB,MAEF,IAAK,kBACHC,EAAYO,SAAQ,SAAUE,GAC5B5B,EAAayB,KAAK9B,EAAY,CAC5BV,SAAU,CACR9E,KAAM,aACNgH,YAAaS,IAEdX,EAAeC,OAEpB,MAEF,IAAK,UACHjB,EAAgBwB,KAAK9B,EAAY,CAC/BV,SAAUA,GACTgC,EAAeC,IAClBC,EAAYO,SAAQ,SAAUE,GAC5B1B,EAAuBuB,KAAK9B,EAAY,CACtCV,SAAU,CACR9E,KAAM,aACNgH,YAAaS,IAEdX,EAAeC,OAEpB,MAEF,IAAK,eACHC,EAAYO,SAAQ,SAAUG,GAC5B5B,EAAgBwB,KAAK9B,EAAY,CAC/BV,SAAU,CACR9E,KAAM,UACNgH,YAAaU,IAEdZ,EAAeC,IAClBW,EAAQH,SAAQ,SAAUE,GACxB1B,EAAuBuB,KAAK9B,EAAY,CACtCV,SAAU,CACR9E,KAAM,aACNgH,YAAaS,IAEdX,EAAeC,eAnExBT,EAAA,EAAIqB,KAAK,GAAGR,OAAOnH,EAAM,8BAAzBsG,GA4EJ,IAAIY,EAAwB,CAC1BU,MAAO,EACPC,WAAY,EACZC,WAAY,EACZC,gBAAiB,EACjBC,QAAS,EACTC,aAAc,GCxIhB,IAEIpI,EAAe,CACjBc,SAAS,EACTC,QAAQ,EACRsH,UAAU,EACVC,WAAW,EACX5H,eAAgB,SAChBC,eAAgB,EAChBC,mBAAoB,EACpBC,mBAAoBL,OAAOC,iBAC3B8H,kBAAkB,EAClBC,eAAgB,EAChBC,eAAgB,EAChBC,iBAAkB,SAClBC,iBAAkB,EAClBC,qBAAsB,EACtBC,qBAAsBrI,OAAOC,iBAC7BY,aAAc,CACZlB,KAAM,WACNE,MApBmB,CAAC,EAAG,EAAG,EAAG,MAsB/Be,aAAc,CACZjB,KAAM,WACNE,MAvBmB,CAAC,EAAG,EAAG,EAAG,MAyB/Bc,UAAW,CACThB,KAAM,WACNE,MAAO,GAETiB,aAAc,CACZnB,KAAM,WACNE,MAAO,GAETyI,aAAc,CACZ3I,KAAM,WACNE,MAAO,KAET0I,UAAU,GAGZ,SAASC,EAAeC,GACtB,OAAOA,EAAEhE,SAASkC,YAGpB,IAAI,EAAe,SAAU+B,GAG3B,SAASC,IAGP,OAFA,YAAgBtH,KAAMsH,GAEf,YAA2BtH,KAAM,YAAgBsH,GAAcrH,MAAMD,KAAME,YAwQpF,OA7QA,YAAUoH,EAAcD,GAQxB,YAAaC,EAAc,CAAC,CAC1BnH,IAAK,kBACL3B,MAAO,WACLwB,KAAKmC,MAAQ,CACX0B,SAAU,IAGR7D,KAAKuB,MAAMgG,kBACb3C,EAAA,EAAI4C,QAAQ,mBAAoB,qBAAhC5C,KAGH,CACDzE,IAAK,cACL3B,MAAO,SAAqBqD,GAC1B,IAAIN,EAAQM,EAAKN,MACbQ,EAAcF,EAAKE,YAEvB,GAAKA,EAAY0F,YAAjB,CAIA,IAAI5D,EDrFH,SAA4B6D,GACjC,GAAI5C,MAAMC,QAAQ2C,GAChB,OAAOA,EAKT,OAFA9C,EAAA,EAAIC,OAAO6C,EAAQpJ,KAAM,8BAEjBoJ,EAAQpJ,MACd,IAAK,UACH,MAAO,CAACoJ,GAEV,IAAK,oBAEH,OADA9C,EAAA,EAAIC,OAAOC,MAAMC,QAAQ2C,EAAQ7D,UAAW,wCACrC6D,EAAQ7D,SAEjB,QACE,MAAO,CAAC,CACNT,SAAUsE,KCoEGC,CAAmBpG,EAAMqG,MACpC9D,EAAc9D,KAAK6H,eAAeC,KAAK9H,MAE3C,GAAI8E,MAAMC,QAAQhD,EAAY0F,aAAc,CAC1C,IAAIM,EAAc/H,KAAKmC,MAAM0B,SACzBmE,EAAc,GACdC,EAAe,GAEnB,IAAK,IAAI9H,KAAO4H,EACdC,EAAY7H,GAAO4H,EAAY5H,GAAK+H,QACpCD,EAAa9H,GAAO,GAGtB,IAAIgI,GAA4B,EAC5BC,GAAoB,EACpBC,OAAiBrE,EAErB,IACE,IAAK,IAA4DsE,EAAxDC,EAAYxG,EAAY0F,YAAYe,OAAOC,cAAsBN,GAA6BG,EAAQC,EAAUG,QAAQC,MAAOR,GAA4B,EAAM,CACxK,IAAIpE,EAAYuE,EAAM9J,MAClBoK,EAAkBhF,EAAwBC,EAAUC,EAAaC,GAErE,IAAK,IAAI8E,KAAQd,EACfE,EAAaY,GAAMjD,KAAK,YAAe,CACrCgC,KAAMI,EAAYa,GAClBC,SAAU,SAAkB1B,GAC1B,OAAOA,EAAE2B,SAASC,OAEpBjF,UAAWA,EACXkF,QAASL,EAAgBC,OAI/B,MAAOK,GACPd,GAAoB,EACpBC,EAAiBa,EACjB,QACA,IACOf,GAAoD,MAAvBI,EAAkB,QAClDA,EAAkB,SAEpB,QACA,GAAIH,EACF,MAAMC,GAKZrI,KAAKqC,SAAS,CACZwB,SAAUmE,EACVC,aAAcA,SAGhBjI,KAAKqC,SAAS,CACZwB,SAAUD,EAAwBC,EAAUC,GAC5CmE,aAAc,QAInB,CACD9H,IAAK,eACL3B,MAAO,WACL,IAAI2K,EAAcnJ,KAAKmC,MACnB0B,EAAWsF,EAAYtF,SACvBoE,EAAekB,EAAYlB,aAC3B/D,EAAgBL,EAASK,cACzBC,EAAeN,EAASM,aACxBC,EAAkBP,EAASO,gBAC3BC,EAAyBR,EAASQ,uBAClC1B,EAAc3C,KAAKuB,MACnBtC,EAAU0D,EAAY1D,QACtBC,EAASyD,EAAYzD,OACrBsH,EAAW7D,EAAY6D,SACvBC,EAAY9D,EAAY8D,UACxBS,EAAWvE,EAAYuE,SACvBkC,EAAczG,EAAYyG,YAC1BC,EAAerJ,KAAKuB,MACpB1C,EAAiBwK,EAAaxK,eAC9BC,EAAiBuK,EAAavK,eAC9BC,EAAqBsK,EAAatK,mBAClCC,EAAqBqK,EAAarK,mBAClC0H,EAAmB2C,EAAa3C,iBAChCC,EAAiB0C,EAAa1C,eAC9BE,EAAmBwC,EAAaxC,iBAChCC,EAAmBuC,EAAavC,iBAChCC,EAAuBsC,EAAatC,qBACpCC,EAAuBqC,EAAarC,qBACpCJ,EAAiByC,EAAazC,eAC9B0C,EAAoBD,EAAaC,kBACjCC,EAAevJ,KAAKuB,MACpB/B,EAAe+J,EAAa/J,aAC5BD,EAAegK,EAAahK,aAC5BD,EAAYiK,EAAajK,UACzBG,EAAe8J,EAAa9J,aAC5B8H,EAAmBgC,EAAahC,iBAChCN,EAAesC,EAAatC,aAC5BuC,EAAiBD,EAAaC,eAC9BC,EAAmBzJ,KAAK0J,iBAAiB,gBAAiB,KAC1DC,EAAqB3J,KAAK0J,iBAAiB,kBAAmB,KAC9DE,EAAmB5J,KAAK0J,iBAAiB,eAAgB,KACzDG,EAAc7J,KAAK0J,iBAAiB,SAAU,KAC9CI,EAAmB9J,KAAK+J,qBAAqB,gBAAiB3F,IAAoB,IAAIqF,EAAiB,CACzGO,UAAW/B,EAAa7D,iBAAmB,WACzC,OAAO6D,EAAa7D,iBAEtBoC,SAAUA,EACVI,eAAgBA,EAChB1H,OAAQA,EACRuH,UAAWA,EACXS,SAAUA,EACVD,aAAcjH,KAAKiK,oBAAoBhD,GACvC1H,aAAcS,KAAKiK,oBAAoB1K,GACvCC,aAAcQ,KAAKiK,oBAAoBzK,GACvC4J,YAAaA,GAAe,CAC1Bc,WAAYd,EAAYhG,SACxB6D,aAAcmC,EAAYnC,aAC1B1H,aAAc6J,EAAY7J,aAC1BC,aAAc4J,EAAY5J,eAE3BQ,KAAKmK,iBAAiB,CACvB/J,GAAI,gBACJoJ,eAAgB,CACdvC,aAAcuC,EAAevC,aAC7B1H,aAAciK,EAAejK,aAC7BC,aAAcgK,EAAehK,gBAE7B,CACFoI,KAAMxD,EACN8F,WAAY/C,IAoGd,MAAO,EAAEX,GAAYsD,GAlGGtD,GAAYvH,GAAWe,KAAK+J,qBAAqB,kBAAmB1F,IAA2B,IAAIsF,EAAmB,CAC5IK,UAAW/B,EAAa5D,wBAA0B,WAChD,OAAO4D,EAAa5D,wBAEtB+F,WAAYvL,EACZwL,WAAYvL,EACZwL,eAAgBvL,EAChBwL,eAAgBvL,EAChBwL,QAAS9D,EACT+D,WAAY9D,EACZ+D,cAAepB,EACfzJ,SAAUG,KAAKiK,oBAAoBzK,GACnCmL,SAAU3K,KAAKiK,oBAAoBxK,GACnCmL,aAAc5K,KAAKiK,oBAAoB1C,GACvC6B,YAAaA,GAAe,CAC1ByB,QAASzB,EAAYhG,SACrBvD,SAAUuJ,EAAY5J,aACtBmL,SAAUvB,EAAY3J,eAEvBO,KAAKmK,iBAAiB,CACvB/J,GAAI,kBACJoJ,eAAgB,CACd3J,SAAU2J,EAAehK,aACzBmL,SAAUnB,EAAe/J,aACzBmL,aAAcpB,EAAejC,oBAE7B,CACFK,KAAMvD,EACNwG,QAAS1D,IAEKnH,KAAK+J,qBAAqB,cAAe5F,IAAiB,IAAIyF,EAAiB,CAC7FI,UAAW/B,EAAa9D,cAAgB,WACtC,OAAO8D,EAAa9D,cAEtBiG,WAAYvL,EACZwL,WAAYvL,EACZwL,eAAgBvL,EAChBwL,eAAgBvL,EAChBwL,QAAS9D,EACT+D,WAAY9D,EACZ+D,cAAepB,EACfzJ,SAAUG,KAAKiK,oBAAoBzK,GACnCmL,SAAU3K,KAAKiK,oBAAoBxK,GACnCmL,aAAc5K,KAAKiK,oBAAoB1C,GACvC6B,YAAaA,GAAe,CAC1ByB,QAASzB,EAAYhG,SACrBvD,SAAUuJ,EAAY5J,aACtBmL,SAAUvB,EAAY3J,eAEvBO,KAAKmK,iBAAiB,CACvB/J,GAAI,eACJoJ,eAAgB,CACd3J,SAAU2J,EAAehK,aACzBmL,SAAUnB,EAAe/J,aACzBmL,aAAcpB,EAAejC,oBAE7B,CACFK,KAAMzD,EACN0G,QAAS1D,IAEMnH,KAAK+J,qBAAqB,SAAU7F,IAAkB,IAAI2F,EAAY,CACrFG,UAAW/B,EAAa/D,eAAiB,WACvC,OAAO+D,EAAa/D,eAEtBjF,QAASA,EACTC,OAAQA,EACRd,YAAayI,EACbxI,YAAayI,EACbrI,gBAAiBsI,EACjBrI,gBAAiBsI,EACjBnI,eAAgBA,EAChBC,eAAgBA,EAChBC,mBAAoBA,EACpBC,mBAAoBA,EACpBO,aAAcS,KAAKiK,oBAAoB1K,GACvCC,aAAcQ,KAAKiK,oBAAoBzK,GACvCF,UAAWU,KAAKiK,oBAAoB3K,GACpCG,aAAcO,KAAKiK,oBAAoBxK,GACvC2J,YAAaA,GAAe,CAC1BjK,YAAaiK,EAAYhG,SACzB7D,aAAc6J,EAAY7J,aAC1BC,aAAc4J,EAAY5J,aAC1BF,UAAW8J,EAAY9J,UACvBG,aAAc2J,EAAY3J,eAE3BO,KAAKmK,iBAAiB,CACvB/J,GAAI,SACJoJ,eAAgB,CACdjK,aAAciK,EAAejK,aAC7BC,aAAcgK,EAAehK,aAC7BF,UAAWkK,EAAelK,UAC1BG,aAAc+J,EAAe/J,gBAE7B,CACFmI,KAAM1D,EACN/E,YAAagI,EACb2D,uBAAwB9K,KAAK+K,qBAAqB7G,KAE4BsC,GAAYsD,KAE7F,CACD3J,IAAK,uBACL3B,MAAO,SAA8BoJ,GACnC,IAAIkD,EAAyB9K,KAAKuB,MAAMuJ,uBACxC,OAAOnM,OAAO+G,SAASoF,GAA0BlD,EAAKoD,WAAU,SAAUC,GACxE,OAAOA,EAAElC,SAASC,QAAU8B,KACzB,SAIFxD,EA9QU,CA+QjB,KAGF,EAAa3D,UAAY,eACzB,EAAaxF,aAAeA","file":"45d34e93b1f94491290e6c2ca868f2168312a6b9-bf4a04ae19d8e3390639.js","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, project32, picking } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  radiusUnits: 'meters',\n  radiusScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  radiusMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  lineWidthUnits: 'meters',\n  lineWidthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  lineWidthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  lineWidthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  stroked: false,\n  filled: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  strokeWidth: {\n    deprecatedFor: 'getLineWidth'\n  },\n  outline: {\n    deprecatedFor: 'stroked'\n  },\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\n\nvar ScatterplotLayer = function (_Layer) {\n  _inherits(ScatterplotLayer, _Layer);\n\n  function ScatterplotLayer() {\n    _classCallCheck(this, ScatterplotLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScatterplotLayer).apply(this, arguments));\n  }\n\n  _createClass(ScatterplotLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(id) {\n      return _get(_getPrototypeOf(ScatterplotLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.getAttributeManager().addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceRadius: {\n          size: 1,\n          transition: true,\n          accessor: 'getRadius',\n          defaultValue: 1\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getFillColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          transition: true,\n          normalized: true,\n          type: 5121,\n          accessor: 'getLineColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceLineWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getLineWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      _get(_getPrototypeOf(ScatterplotLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (changeFlags.extensionsChanged) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model[\"delete\"]();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n          radiusUnits = _this$props.radiusUnits,\n          radiusScale = _this$props.radiusScale,\n          radiusMinPixels = _this$props.radiusMinPixels,\n          radiusMaxPixels = _this$props.radiusMaxPixels,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          lineWidthUnits = _this$props.lineWidthUnits,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels;\n      var pointRadiusMultiplier = radiusUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      var lineWidthMultiplier = lineWidthUnits === 'pixels' ? viewport.metersPerPixel : 1;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled: filled,\n        radiusScale: radiusScale * pointRadiusMultiplier,\n        radiusMinPixels: radiusMinPixels,\n        radiusMaxPixels: radiusMaxPixels,\n        lineWidthScale: lineWidthScale * lineWidthMultiplier,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n      return new Model(gl, Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            positions: {\n              size: 3,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n\n  return ScatterplotLayer;\n}(Layer);\n\nexport { ScatterplotLayer as default };\nScatterplotLayer.layerName = 'ScatterplotLayer';\nScatterplotLayer.defaultProps = defaultProps;","export default \"#define SHADER_NAME scatterplot-layer-vertex-shader\\n\\nattribute vec3 positions;\\n\\nattribute vec3 instancePositions;\\nattribute vec3 instancePositions64Low;\\nattribute float instanceRadius;\\nattribute float instanceLineWidths;\\nattribute vec4 instanceFillColors;\\nattribute vec4 instanceLineColors;\\nattribute vec3 instancePickingColors;\\n\\nuniform float opacity;\\nuniform float radiusScale;\\nuniform float radiusMinPixels;\\nuniform float radiusMaxPixels;\\nuniform float lineWidthScale;\\nuniform float lineWidthMinPixels;\\nuniform float lineWidthMaxPixels;\\nuniform float stroked;\\nuniform bool filled;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\nvarying float outerRadiusPixels;\\n\\nvoid main(void) {\\n  geometry.worldPosition = instancePositions;\\n  outerRadiusPixels = clamp(\\n    project_size_to_pixel(radiusScale * instanceRadius),\\n    radiusMinPixels, radiusMaxPixels\\n  );\\n  float lineWidthPixels = clamp(\\n    project_size_to_pixel(lineWidthScale * instanceLineWidths),\\n    lineWidthMinPixels, lineWidthMaxPixels\\n  );\\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\\n  unitPosition = positions.xy;\\n  geometry.uv = unitPosition;\\n  geometry.pickingColor = instancePickingColors;\\n\\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\\n  \\n  vec3 offset = positions * project_pixel_size(outerRadiusPixels);\\n  DECKGL_FILTER_SIZE(offset, geometry);\\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\\n}\\n\";","export default \"#define SHADER_NAME scatterplot-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform bool filled;\\nuniform float stroked;\\n\\nvarying vec4 vFillColor;\\nvarying vec4 vLineColor;\\nvarying vec2 unitPosition;\\nvarying float innerUnitRadius;\\nvarying float outerRadiusPixels;\\n\\nvoid main(void) {\\n  geometry.uv = unitPosition;\\n\\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\\n  float inCircle = smoothedge(distToCenter, outerRadiusPixels);\\n\\n  if (inCircle == 0.0) {\\n    discard;\\n  }\\n\\n  if (stroked > 0.5) {\\n    float isLine = smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter);\\n    if (filled) {\\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\\n    } else {\\n      if (isLine == 0.0) {\\n        discard;\\n      }\\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\\n    }\\n  } else if (filled) {\\n    gl_FragColor = vFillColor;\\n  } else {\\n    discard;\\n  }\\n\\n  gl_FragColor.a *= inCircle;\\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\\n}\\n\";","import { log } from '@deck.gl/core';\nexport function getGeojsonFeatures(geojson) {\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      return [geojson];\n\n    case 'FeatureCollection':\n      log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n\n    default:\n      return [{\n        geometry: geojson\n      }];\n  }\n}\nexport function separateGeojsonFeatures(features, wrapFeature) {\n  var dataRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  var _dataRange$startRow = dataRange.startRow,\n      startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n      _dataRange$endRow = dataRange.endRow,\n      endRow = _dataRange$endRow === void 0 ? features.length : _dataRange$endRow;\n\n  for (var featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    var feature = features[featureIndex];\n    log.assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n    var geometry = feature.geometry;\n\n    if (geometry.type === 'GeometryCollection') {\n      log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      var geometries = geometry.geometries;\n\n      for (var i = 0; i < geometries.length; i++) {\n        var subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, wrapFeature, feature, featureIndex);\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, wrapFeature, sourceFeature, sourceFeatureIndex) {\n  var type = geometry.type,\n      coordinates = geometry.coordinates;\n  var pointFeatures = separated.pointFeatures,\n      lineFeatures = separated.lineFeatures,\n      polygonFeatures = separated.polygonFeatures,\n      polygonOutlineFeatures = separated.polygonOutlineFeatures;\n\n  if (!validateGeometry(type, coordinates)) {\n    log.warn(\"\".concat(type, \" coordinates are malformed\"))();\n    return;\n  }\n\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      break;\n\n    case 'MultiPoint':\n      coordinates.forEach(function (point) {\n        pointFeatures.push(wrapFeature({\n          geometry: {\n            type: 'Point',\n            coordinates: point\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'LineString':\n      lineFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      break;\n\n    case 'MultiLineString':\n      coordinates.forEach(function (path) {\n        lineFeatures.push(wrapFeature({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'Polygon':\n      polygonFeatures.push(wrapFeature({\n        geometry: geometry\n      }, sourceFeature, sourceFeatureIndex));\n      coordinates.forEach(function (path) {\n        polygonOutlineFeatures.push(wrapFeature({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          }\n        }, sourceFeature, sourceFeatureIndex));\n      });\n      break;\n\n    case 'MultiPolygon':\n      coordinates.forEach(function (polygon) {\n        polygonFeatures.push(wrapFeature({\n          geometry: {\n            type: 'Polygon',\n            coordinates: polygon\n          }\n        }, sourceFeature, sourceFeatureIndex));\n        polygon.forEach(function (path) {\n          polygonOutlineFeatures.push(wrapFeature({\n            geometry: {\n              type: 'LineString',\n              coordinates: path\n            }\n          }, sourceFeature, sourceFeatureIndex));\n        });\n      });\n      break;\n\n    default:\n  }\n}\n\nvar COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\nexport function validateGeometry(type, coordinates) {\n  var nestLevel = COORDINATE_NEST_LEVEL[type];\n  log.assert(nestLevel, \"Unknown GeoJSON type \".concat(type));\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport { replaceInRange } from '../utils';\nimport { getGeojsonFeatures, separateGeojsonFeatures } from './geojson';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  elevationScale: 1,\n  pointRadiusUnits: 'meters',\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0,\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getRadius: {\n    type: 'accessor',\n    value: 1\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nvar GeoJsonLayer = function (_CompositeLayer) {\n  _inherits(GeoJsonLayer, _CompositeLayer);\n\n  function GeoJsonLayer() {\n    _classCallCheck(this, GeoJsonLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GeoJsonLayer).apply(this, arguments));\n  }\n\n  _createClass(GeoJsonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        features: {}\n      };\n\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          changeFlags = _ref.changeFlags;\n\n      if (!changeFlags.dataChanged) {\n        return;\n      }\n\n      var features = getGeojsonFeatures(props.data);\n      var wrapFeature = this.getSubLayerRow.bind(this);\n\n      if (Array.isArray(changeFlags.dataChanged)) {\n        var oldFeatures = this.state.features;\n        var newFeatures = {};\n        var featuresDiff = {};\n\n        for (var key in oldFeatures) {\n          newFeatures[key] = oldFeatures[key].slice();\n          featuresDiff[key] = [];\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = changeFlags.dataChanged[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var dataRange = _step.value;\n            var partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n\n            for (var _key in oldFeatures) {\n              featuresDiff[_key].push(replaceInRange({\n                data: newFeatures[_key],\n                getIndex: function getIndex(f) {\n                  return f.__source.index;\n                },\n                dataRange: dataRange,\n                replace: partialFeatures[_key]\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.setState({\n          features: newFeatures,\n          featuresDiff: featuresDiff\n        });\n      } else {\n        this.setState({\n          features: separateGeojsonFeatures(features, wrapFeature),\n          featuresDiff: {}\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state = this.state,\n          features = _this$state.features,\n          featuresDiff = _this$state.featuresDiff;\n      var pointFeatures = features.pointFeatures,\n          lineFeatures = features.lineFeatures,\n          polygonFeatures = features.polygonFeatures,\n          polygonOutlineFeatures = features.polygonOutlineFeatures;\n      var _this$props = this.props,\n          stroked = _this$props.stroked,\n          filled = _this$props.filled,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          material = _this$props.material,\n          transitions = _this$props.transitions;\n      var _this$props2 = this.props,\n          lineWidthUnits = _this$props2.lineWidthUnits,\n          lineWidthScale = _this$props2.lineWidthScale,\n          lineWidthMinPixels = _this$props2.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props2.lineWidthMaxPixels,\n          lineJointRounded = _this$props2.lineJointRounded,\n          lineMiterLimit = _this$props2.lineMiterLimit,\n          pointRadiusUnits = _this$props2.pointRadiusUnits,\n          pointRadiusScale = _this$props2.pointRadiusScale,\n          pointRadiusMinPixels = _this$props2.pointRadiusMinPixels,\n          pointRadiusMaxPixels = _this$props2.pointRadiusMaxPixels,\n          elevationScale = _this$props2.elevationScale,\n          lineDashJustified = _this$props2.lineDashJustified;\n      var _this$props3 = this.props,\n          getLineColor = _this$props3.getLineColor,\n          getFillColor = _this$props3.getFillColor,\n          getRadius = _this$props3.getRadius,\n          getLineWidth = _this$props3.getLineWidth,\n          getLineDashArray = _this$props3.getLineDashArray,\n          getElevation = _this$props3.getElevation,\n          updateTriggers = _this$props3.updateTriggers;\n      var PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n      var PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n      var LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n      var PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n      var polygonFillLayer = this.shouldRenderSubLayer('polygons-fill', polygonFeatures) && new PolygonFillLayer({\n        _dataDiff: featuresDiff.polygonFeatures && function () {\n          return featuresDiff.polygonFeatures;\n        },\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        material: material,\n        getElevation: this.getSubLayerAccessor(getElevation),\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        transitions: transitions && {\n          getPolygon: transitions.geometry,\n          getElevation: transitions.getElevation,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-fill',\n        updateTriggers: {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: polygonFeatures,\n        getPolygon: getCoordinates\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) && new PolygonStrokeLayer({\n        _dataDiff: featuresDiff.polygonOutlineFeatures && function () {\n          return featuresDiff.polygonOutlineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'polygons-stroke',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: polygonOutlineFeatures,\n        getPath: getCoordinates\n      });\n      var pathLayer = this.shouldRenderSubLayer('linestrings', lineFeatures) && new LineStringsLayer({\n        _dataDiff: featuresDiff.lineFeatures && function () {\n          return featuresDiff.lineFeatures;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        rounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray),\n        transitions: transitions && {\n          getPath: transitions.geometry,\n          getColor: transitions.getLineColor,\n          getWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'line-strings',\n        updateTriggers: {\n          getColor: updateTriggers.getLineColor,\n          getWidth: updateTriggers.getLineWidth,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: lineFeatures,\n        getPath: getCoordinates\n      });\n      var pointLayer = this.shouldRenderSubLayer('points', pointFeatures) && new PointsLayer({\n        _dataDiff: featuresDiff.pointFeatures && function () {\n          return featuresDiff.pointFeatures;\n        },\n        stroked: stroked,\n        filled: filled,\n        radiusUnits: pointRadiusUnits,\n        radiusScale: pointRadiusScale,\n        radiusMinPixels: pointRadiusMinPixels,\n        radiusMaxPixels: pointRadiusMaxPixels,\n        lineWidthUnits: lineWidthUnits,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getRadius: this.getSubLayerAccessor(getRadius),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        transitions: transitions && {\n          getPosition: transitions.geometry,\n          getFillColor: transitions.getFillColor,\n          getLineColor: transitions.getLineColor,\n          getRadius: transitions.getRadius,\n          getLineWidth: transitions.getLineWidth\n        }\n      }, this.getSubLayerProps({\n        id: 'points',\n        updateTriggers: {\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getRadius: updateTriggers.getRadius,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }), {\n        data: pointFeatures,\n        getPosition: getCoordinates,\n        highlightedObjectIndex: this._getHighlightedIndex(pointFeatures)\n      });\n      return [!extruded && polygonFillLayer, polygonLineLayer, pathLayer, pointLayer, extruded && polygonFillLayer];\n    }\n  }, {\n    key: \"_getHighlightedIndex\",\n    value: function _getHighlightedIndex(data) {\n      var highlightedObjectIndex = this.props.highlightedObjectIndex;\n      return Number.isFinite(highlightedObjectIndex) ? data.findIndex(function (d) {\n        return d.__source.index === highlightedObjectIndex;\n      }) : null;\n    }\n  }]);\n\n  return GeoJsonLayer;\n}(CompositeLayer);\n\nexport { GeoJsonLayer as default };\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;"],"sourceRoot":""}