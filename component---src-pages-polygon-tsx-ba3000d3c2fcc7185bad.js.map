{"version":3,"sources":["webpack:///./src/pages/polygon.tsx"],"names":["Polygon","props","state","data","onHover","x","y","object","setState","hoveredObject","deckLayer","viewState","center","reverse","zoom","pitch","bearing","initMap","this","_renderLayers","componentWillUnmount","remove","renderTooltip","className","style","top","left","name","year","layers","GeoJsonLayer","stroked","filled","lineWidthMinPixels","opacity","getLineColor","getFillColor","setProps","DeckGLLayer","animation","forceRenderOnMoving","forceRenderOnZooming","renderStart","renderState","update","map","addLayer","Base"],"mappings":"4KAqBMA,E,YAOJ,WAAaC,GAAe,aAC1B,cAAMA,IAAN,MALFC,MAAgB,CACdC,KAAM,IAGoB,EA0B5BC,QAAU,YAA2B,IAAxBC,EAAwB,EAAxBA,EAAGC,EAAqB,EAArBA,EAAGC,EAAkB,EAAlBA,OACjB,EAAKC,SAAS,CAAEH,IAAGC,IAAGG,cAAeF,KAzBrC,EAAKG,UAAY,KAEjB,EAAKC,UAAY,CACfC,OAAQ,CAAC,QAAS,QAAQC,UAC1BC,KAAM,GACNC,MAAO,KACPC,QAAS,GARe,E,4CAY5BC,QAAA,WACE,YAAMA,QAAN,WACAC,KAAKC,iB,EAGPC,qBAAA,WAEMF,KAAKR,WAEPQ,KAAKR,UAAUW,SAEjB,YAAMD,qBAAN,Y,EAOFE,cAAA,WAAiB,MACiBJ,KAAKhB,MAA7BG,EADO,EACPA,EAAGC,EADI,EACJA,EAAGG,EADC,EACDA,cACd,OACEA,GACE,yBAAKc,UAAU,UAAUC,MAAO,CAAEC,IAAKnB,EAAGoB,KAAMrB,IAC7CI,EAAckB,KADjB,IACwBlB,EAAcmB,KAAd,IAAyBnB,EAAcmB,KAAvC,IAAiD,K,EAM/ET,cAAA,WAAiB,WACTlB,EAAQ,CACZ4B,OAAQ,CACN,IAAIC,IAAa,CACf3B,KAjER,qGAkEQ4B,SAAS,EACTC,QAAQ,EACRC,mBAAoB,EACpBC,QAAS,EACTC,aAAc,iBAAM,CAAC,IAAK,IAAK,MAC/BC,aAAc,iBAAM,CAAC,IAAK,IAAK,EAAG,UAInClB,KAAKR,UAYRQ,KAAKR,UAAU2B,SAASpC,IAXxBiB,KAAKR,UAAY,IAAI4B,IAAY,OAAQrC,EAAO,CAC9CsC,WAAW,EACXC,qBAAqB,EACrBC,sBAAsB,EACtBC,YAAa,WAAM,MACjB,YAAKC,mBAAL,SAAkBC,YAItB1B,KAAK2B,IAAIC,SAAS5B,KAAKR,a,GAxEPqC,WA+EP/C","file":"component---src-pages-polygon-tsx-ba3000d3c2fcc7185bad.js","sourcesContent":["import DeckGLLayer from 'maptalks.deckgl';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport Base from \"./base\";\nimport React from \"react\";\n\n\n// Source data GeoJSON\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/geojson/vancouver-blocks.json'; // eslint-disable-line\n\ninterface IProps {\n\n}\n\ninterface IState {\n  data: any;\n  x?: number;\n  y?: number;\n  hoveredObject?: any;\n}\n\nclass Polygon extends Base {\n  private deckLayer: DeckGLLayer | null;\n\n  state: IState = {\n    data: [],\n  }\n\n  constructor (props: IProps) {\n    super(props);\n    this.deckLayer = null;\n\n    this.viewState = {\n      center: [49.254, -123.13].reverse(),\n      zoom: 11,\n      pitch: 40.5,\n      bearing: 0,\n    };\n  }\n\n  initMap() {\n    super.initMap();\n    this._renderLayers();\n  }\n\n  componentWillUnmount () {\n    // this.map.remove()\n    if (this.deckLayer) {\n      // @ts-ignore\n      this.deckLayer.remove()\n    }\n    super.componentWillUnmount();\n  }\n\n  onHover = ({ x, y, object }: any) => {\n    this.setState({ x, y, hoveredObject: object });\n  }\n\n  renderTooltip () {\n    const { x, y, hoveredObject } = this.state;\n    return (\n      hoveredObject && (\n        <div className=\"tooltip\" style={{ top: y, left: x }}>\n          {hoveredObject.name} {hoveredObject.year ? `(${hoveredObject.year})` : ''}\n        </div>\n      )\n    );\n  }\n\n  _renderLayers () {\n    const props = {\n      layers: [\n        new GeoJsonLayer({\n          data: DATA_URL,\n          stroked: true,\n          filled: true,\n          lineWidthMinPixels: 2,\n          opacity: 1,\n          getLineColor: () => [255, 100, 100],\n          getFillColor: () => [200, 160, 0, 180]\n        })\n      ],\n    }\n    if (!this.deckLayer) {\n      this.deckLayer = new DeckGLLayer('deck', props, {\n        animation: true,\n        forceRenderOnMoving: true,\n        forceRenderOnZooming: true,\n        renderStart: () => {\n          this.renderState?.update();\n        },\n      });\n\n      this.map.addLayer(this.deckLayer);\n    } else {\n      this.deckLayer.setProps(props);\n    }\n  }\n}\n\nexport default Polygon;\n"],"sourceRoot":""}