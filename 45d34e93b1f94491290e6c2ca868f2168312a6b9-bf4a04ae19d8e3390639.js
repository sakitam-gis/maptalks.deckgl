(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"+2Bo":function(e,t,i){"use strict";i.d(t,"a",(function(){return p}));var n=i("9fIP"),o=i("MMYH"),r=i("K/z8"),s=i("sRHE"),a=i("PRnZ"),l=i("8K1b"),u=i("D8sA"),d=i("8eia"),g=i("TjKm"),c=i("CPJl"),h=i("u/Ma"),y=[0,0,0,255],f={radiusUnits:"meters",radiusScale:{type:"number",min:0,value:1},radiusMinPixels:{type:"number",min:0,value:0},radiusMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},lineWidthUnits:"meters",lineWidthScale:{type:"number",min:0,value:1},lineWidthMinPixels:{type:"number",min:0,value:0},lineWidthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},stroked:!1,filled:!0,getPosition:{type:"accessor",value:function(e){return e.position}},getRadius:{type:"accessor",value:1},getFillColor:{type:"accessor",value:y},getLineColor:{type:"accessor",value:y},getLineWidth:{type:"accessor",value:1},strokeWidth:{deprecatedFor:"getLineWidth"},outline:{deprecatedFor:"stroked"},getColor:{deprecatedFor:["getFillColor","getLineColor"]}},p=function(e){function t(){return Object(n.a)(this,t),Object(r.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(l.a)(t,e),Object(o.a)(t,[{key:"getShaders",value:function(e){return Object(a.a)(Object(s.a)(t.prototype),"getShaders",this).call(this,{vs:"#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius),\n    radiusMinPixels, radiusMaxPixels\n  );\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n  unitPosition = positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  vec3 offset = positions * project_pixel_size(outerRadiusPixels);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n",fs:"#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = smoothedge(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter);\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[u.a,d.a]})}},{key:"initializeState",value:function(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceRadius:{size:1,transition:!0,accessor:"getRadius",defaultValue:1},instanceFillColors:{size:this.props.colorFormat.length,transition:!0,normalized:!0,type:5121,accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:this.props.colorFormat.length,transition:!0,normalized:!0,type:5121,accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}},{key:"updateState",value:function(e){var i=e.props,n=e.oldProps,o=e.changeFlags;if(Object(a.a)(Object(s.a)(t.prototype),"updateState",this).call(this,{props:i,oldProps:n,changeFlags:o}),o.extensionsChanged){var r=this.context.gl;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(r)}),this.getAttributeManager().invalidateAll()}}},{key:"draw",value:function(e){var t=e.uniforms,i=this.context.viewport,n=this.props,o=n.radiusUnits,r=n.radiusScale,s=n.radiusMinPixels,a=n.radiusMaxPixels,l=n.stroked,u=n.filled,d=n.lineWidthUnits,g=n.lineWidthScale,c=n.lineWidthMinPixels,h=n.lineWidthMaxPixels,y="pixels"===o?i.metersPerPixel:1,f="pixels"===d?i.metersPerPixel:1;this.state.model.setUniforms(t).setUniforms({stroked:l?1:0,filled:u,radiusScale:r*y,radiusMinPixels:s,radiusMaxPixels:a,lineWidthScale:g*f,lineWidthMinPixels:c,lineWidthMaxPixels:h}).draw()}},{key:"_getModel",value:function(e){return new c.a(e,Object.assign(this.getShaders(),{id:this.props.id,geometry:new h.a({drawMode:6,vertexCount:4,attributes:{positions:{size:3,value:new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0])}}}),isInstanced:!0}))}}]),t}(g.a);p.layerName="ScatterplotLayer",p.defaultProps=f},ErqJ:function(e,t,i){"use strict";i.d(t,"a",(function(){return m}));var n=i("9fIP"),o=i("MMYH"),r=i("K/z8"),s=i("sRHE"),a=i("8K1b"),l=i("02NV"),u=i("N+vi"),d=i("+2Bo"),g=i("5RtV"),c=i("MaeC"),h=i("O4MS");function y(e,t){for(var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n={pointFeatures:[],lineFeatures:[],polygonFeatures:[],polygonOutlineFeatures:[]},o=i.startRow,r=void 0===o?0:o,s=i.endRow,a=void 0===s?e.length:s,u=r;u<a;u++){var d=e[u];l.a.assert(d&&d.geometry,"GeoJSON does not have geometry");var g=d.geometry;if("GeometryCollection"===g.type){l.a.assert(Array.isArray(g.geometries),"GeoJSON does not have geometries array");for(var c=g.geometries,h=0;h<c.length;h++){var y=c[h];f(y,n,t,d,u)}}else f(g,n,t,d,u)}return n}function f(e,t,i,n,o){var r=e.type,s=e.coordinates,a=t.pointFeatures,u=t.lineFeatures,d=t.polygonFeatures,g=t.polygonOutlineFeatures;if(function(e,t){var i=p[e];l.a.assert(i,"Unknown GeoJSON type ".concat(e));for(;t&&--i>0;)t=t[0];return t&&Number.isFinite(t[0])}(r,s))switch(r){case"Point":a.push(i({geometry:e},n,o));break;case"MultiPoint":s.forEach((function(e){a.push(i({geometry:{type:"Point",coordinates:e}},n,o))}));break;case"LineString":u.push(i({geometry:e},n,o));break;case"MultiLineString":s.forEach((function(e){u.push(i({geometry:{type:"LineString",coordinates:e}},n,o))}));break;case"Polygon":d.push(i({geometry:e},n,o)),s.forEach((function(e){g.push(i({geometry:{type:"LineString",coordinates:e}},n,o))}));break;case"MultiPolygon":s.forEach((function(e){d.push(i({geometry:{type:"Polygon",coordinates:e}},n,o)),e.forEach((function(e){g.push(i({geometry:{type:"LineString",coordinates:e}},n,o))}))}))}else l.a.warn("".concat(r," coordinates are malformed"))()}var p={Point:1,MultiPoint:2,LineString:2,MultiLineString:3,Polygon:3,MultiPolygon:4};var v={stroked:!0,filled:!0,extruded:!1,wireframe:!1,lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,lineJointRounded:!1,lineMiterLimit:4,elevationScale:1,pointRadiusUnits:"meters",pointRadiusScale:1,pointRadiusMinPixels:0,pointRadiusMaxPixels:Number.MAX_SAFE_INTEGER,getLineColor:{type:"accessor",value:[0,0,0,255]},getFillColor:{type:"accessor",value:[0,0,0,255]},getRadius:{type:"accessor",value:1},getLineWidth:{type:"accessor",value:1},getElevation:{type:"accessor",value:1e3},material:!0};function L(e){return e.geometry.coordinates}var m=function(e){function t(){return Object(n.a)(this,t),Object(r.a)(this,Object(s.a)(t).apply(this,arguments))}return Object(a.a)(t,e),Object(o.a)(t,[{key:"initializeState",value:function(){this.state={features:{}},this.props.getLineDashArray&&l.a.removed("getLineDashArray","PathStyleExtension")()}},{key:"updateState",value:function(e){var t=e.props,i=e.changeFlags;if(i.dataChanged){var n=function(e){if(Array.isArray(e))return e;switch(l.a.assert(e.type,"GeoJSON does not have type"),e.type){case"Feature":return[e];case"FeatureCollection":return l.a.assert(Array.isArray(e.features),"GeoJSON does not have features array"),e.features;default:return[{geometry:e}]}}(t.data),o=this.getSubLayerRow.bind(this);if(Array.isArray(i.dataChanged)){var r=this.state.features,s={},a={};for(var u in r)s[u]=r[u].slice(),a[u]=[];var d=!0,g=!1,c=void 0;try{for(var f,p=i.dataChanged[Symbol.iterator]();!(d=(f=p.next()).done);d=!0){var v=f.value,L=y(n,o,v);for(var m in r)a[m].push(Object(h.a)({data:s[m],getIndex:function(e){return e.__source.index},dataRange:v,replace:L[m]}))}}catch(P){g=!0,c=P}finally{try{d||null==p.return||p.return()}finally{if(g)throw c}}this.setState({features:s,featuresDiff:a})}else this.setState({features:y(n,o),featuresDiff:{}})}}},{key:"renderLayers",value:function(){var e=this.state,t=e.features,i=e.featuresDiff,n=t.pointFeatures,o=t.lineFeatures,r=t.polygonFeatures,s=t.polygonOutlineFeatures,a=this.props,l=a.stroked,u=a.filled,h=a.extruded,y=a.wireframe,f=a.material,p=a.transitions,v=this.props,m=v.lineWidthUnits,P=v.lineWidthScale,C=v.lineWidthMinPixels,x=v.lineWidthMaxPixels,b=v.lineJointRounded,S=v.lineMiterLimit,F=v.pointRadiusUnits,M=v.pointRadiusScale,R=v.pointRadiusMinPixels,W=v.pointRadiusMaxPixels,_=v.elevationScale,A=v.lineDashJustified,E=this.props,w=E.getLineColor,O=E.getFillColor,k=E.getRadius,D=E.getLineWidth,j=E.getLineDashArray,I=E.getElevation,N=E.updateTriggers,T=this.getSubLayerClass("polygons-fill",c.a),U=this.getSubLayerClass("polygons-stroke",g.a),G=this.getSubLayerClass("line-strings",g.a),z=this.getSubLayerClass("points",d.a),J=this.shouldRenderSubLayer("polygons-fill",r)&&new T({_dataDiff:i.polygonFeatures&&function(){return i.polygonFeatures},extruded:h,elevationScale:_,filled:u,wireframe:y,material:f,getElevation:this.getSubLayerAccessor(I),getFillColor:this.getSubLayerAccessor(O),getLineColor:this.getSubLayerAccessor(w),transitions:p&&{getPolygon:p.geometry,getElevation:p.getElevation,getFillColor:p.getFillColor,getLineColor:p.getLineColor}},this.getSubLayerProps({id:"polygons-fill",updateTriggers:{getElevation:N.getElevation,getFillColor:N.getFillColor,getLineColor:N.getLineColor}}),{data:r,getPolygon:L});return[!h&&J,!h&&l&&this.shouldRenderSubLayer("polygons-stroke",s)&&new U({_dataDiff:i.polygonOutlineFeatures&&function(){return i.polygonOutlineFeatures},widthUnits:m,widthScale:P,widthMinPixels:C,widthMaxPixels:x,rounded:b,miterLimit:S,dashJustified:A,getColor:this.getSubLayerAccessor(w),getWidth:this.getSubLayerAccessor(D),getDashArray:this.getSubLayerAccessor(j),transitions:p&&{getPath:p.geometry,getColor:p.getLineColor,getWidth:p.getLineWidth}},this.getSubLayerProps({id:"polygons-stroke",updateTriggers:{getColor:N.getLineColor,getWidth:N.getLineWidth,getDashArray:N.getLineDashArray}}),{data:s,getPath:L}),this.shouldRenderSubLayer("linestrings",o)&&new G({_dataDiff:i.lineFeatures&&function(){return i.lineFeatures},widthUnits:m,widthScale:P,widthMinPixels:C,widthMaxPixels:x,rounded:b,miterLimit:S,dashJustified:A,getColor:this.getSubLayerAccessor(w),getWidth:this.getSubLayerAccessor(D),getDashArray:this.getSubLayerAccessor(j),transitions:p&&{getPath:p.geometry,getColor:p.getLineColor,getWidth:p.getLineWidth}},this.getSubLayerProps({id:"line-strings",updateTriggers:{getColor:N.getLineColor,getWidth:N.getLineWidth,getDashArray:N.getLineDashArray}}),{data:o,getPath:L}),this.shouldRenderSubLayer("points",n)&&new z({_dataDiff:i.pointFeatures&&function(){return i.pointFeatures},stroked:l,filled:u,radiusUnits:F,radiusScale:M,radiusMinPixels:R,radiusMaxPixels:W,lineWidthUnits:m,lineWidthScale:P,lineWidthMinPixels:C,lineWidthMaxPixels:x,getFillColor:this.getSubLayerAccessor(O),getLineColor:this.getSubLayerAccessor(w),getRadius:this.getSubLayerAccessor(k),getLineWidth:this.getSubLayerAccessor(D),transitions:p&&{getPosition:p.geometry,getFillColor:p.getFillColor,getLineColor:p.getLineColor,getRadius:p.getRadius,getLineWidth:p.getLineWidth}},this.getSubLayerProps({id:"points",updateTriggers:{getFillColor:N.getFillColor,getLineColor:N.getLineColor,getRadius:N.getRadius,getLineWidth:N.getLineWidth}}),{data:n,getPosition:L,highlightedObjectIndex:this._getHighlightedIndex(n)}),h&&J]}},{key:"_getHighlightedIndex",value:function(e){var t=this.props.highlightedObjectIndex;return Number.isFinite(t)?e.findIndex((function(e){return e.__source.index===t})):null}}]),t}(u.a);m.layerName="GeoJsonLayer",m.defaultProps=v}}]);
//# sourceMappingURL=45d34e93b1f94491290e6c2ca868f2168312a6b9-bf4a04ae19d8e3390639.js.map